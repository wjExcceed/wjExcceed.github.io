<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>巴扎嘿的博客</title>
  
  <subtitle>a newbie&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-07-15T02:56:57.060Z</updated>
  <id>/</id>
  
  <author>
    <name>wjExcceed</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>a</title>
    <link href="/2019/07/15/a/"/>
    <id>/2019/07/15/a/</id>
    <published>2019-07-15T02:56:57.000Z</published>
    <updated>2019-07-15T02:56:57.060Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java内存模型——JMM</title>
    <link href="/2017/08/28/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E2%80%94%E2%80%94JMM/"/>
    <id>/2017/08/28/Java内存模型——JMM/</id>
    <published>2017-08-28T13:19:15.000Z</published>
    <updated>2019-07-15T02:16:33.612Z</updated>
    
    <content type="html"><![CDATA[ <!--TOC--><p>JMM 全称,Java Memory Model. 这个内存模型与Stack，heap GC分代的内存模型，不是一回事，两者是通过不通的维度，将硬件访问抽象出来的一层抽象的逻辑模型，JVM屏蔽了硬件的直接操作。 GC分代的内存模型更加贴近与垃圾回收和内存分配使用的理解，而JMM模型更加贴近，多线程和内存之间的通讯。</p> <a id="more"></a><h2 id="工作内存和主内存"><a href="#工作内存和主内存" class="headerlink" title="工作内存和主内存"></a>工作内存和主内存</h2><p>Java内存模型规定了所有的变量都存储在主内存（Main Memory）中。每条线程还有自己的工作内存，线程的工作内存中保存了被该线程使用到的变量的主内存副本拷贝，线程对变量的所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的变量。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。 </p><p><strong>需要注意的是， 放在主内存的变量包括，实例字段、静态字段和构成数组对象的元素，但不包括局部变量与方法参数，因为后者是线程独有的。</strong></p><h2 id="内存间的交互操作"><a href="#内存间的交互操作" class="headerlink" title="内存间的交互操作"></a>内存间的交互操作</h2><p>线程间如果要完成变成的同步和共享，必须经历下面2个步骤。</p><ol><li><p>线程A必须要把线程A的工作内存更新过的变量刷新到主内存去。</p></li><li><p>线程B到主内存中去读取线程A更新过的共享变量</p></li></ol><p>这些通讯操作是被JMM屏蔽的，要保证变量的线程安全共享需要使用Java的同步块(synchonrized），或者其他并发工具。这里强调的是安全共享，在不加同步块，和并发工具的情况下，变量也是可以被共享的，只是不能保证读都最新数据，就是常说的脏读，错读等。</p>]]></content>
    
    <summary type="html">
    
      &lt;!--TOC--&gt;
&lt;p&gt;JMM 全称,Java Memory Model. 这个内存模型与Stack，heap GC分代的内存模型，不是一回事，两者是通过不通的维度，将硬件访问抽象出来的一层抽象的逻辑模型，JVM屏蔽了硬件的直接操作。 GC分代的内存模型更加贴近与垃圾回收和内存分配使用的理解，而JMM模型更加贴近，多线程和内存之间的通讯。&lt;/p&gt;
    
    </summary>
    
      <category term="聚沙成塔" scheme="/categories/record/"/>
    
    
      <category term="record" scheme="/tags/record/"/>
    
      <category term="java" scheme="/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>聊聊操作系统</title>
    <link href="/2017/08/20/%E8%81%8A%E8%81%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>/2017/08/20/聊聊操作系统/</id>
    <published>2017-08-20T15:22:45.000Z</published>
    <updated>2019-07-15T02:16:33.608Z</updated>
    
    <content type="html"><![CDATA[<!--TOC--><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="SWAP的概述"><a href="#SWAP的概述" class="headerlink" title="SWAP的概述"></a>SWAP的概述</h3><p>SWAP就是LINUX下的虚拟内存分区，它的作用是在物理内存使用完之后,将磁盘空间(也就是SWAP分区)虚拟成内存来使用。</p><a id="more"></a><p>SWAP的作用可简单描述为：当内存不够用时，将存储器中的数据块从DRAM移到SWAP的磁盘空间中，以释放更多的空间给当前进程使用。当再次需要那些数据时，就可以将swap磁盘中的数据重新移到内存，而将那些不用的数据块从内存移到SWAP中。</p><!--more--><p>数据从内存移动交换区的行为被称为页面调用，发生在后台的页面调用没有来自应用程序的干涉。</p><p>SWAP空间是分页的，每一页的大小和内存也大小是一样的。</p><p>并不是一定要给每个系统划分SWAP，比如大多数的嵌入式就没有SWAP分区。</p><p>值得注意的是：并不是所有从物理内存中交换出来的数据都会被放到Swap中（如果这样的话，Swap就会不堪重负），有相当一部分数据被直接交换到文件系统。例如，有的程序会打开一些文件，对文件进行读写（其实每个程序都至少要打开一个文件，那就是运行程序本身），当需要将这些程序的内存空间交换出去时，就没有必要将文件部分的数据放到Swap空间中了，而可以直接将其放到文件里去。如果是读文件操作，那么内存数据被直接释放，不需要交换出来，因为下次需要时，可直接从文件系统恢复；如果是写文件，只需要将变化的数据保存到文件中，以便恢复。但是那些用malloc和new函数生成的对象的数据则不同，它们需要Swap空间，因为它们在文件系统中没有相应的“储备”文件，因此被称作“匿名”(Anonymous)内存数据。这类数据还包括堆栈中的一些状态和变量数据等。所以说，Swap空间是“匿名”数据的交换空间。</p><h3 id="fork函数"><a href="#fork函数" class="headerlink" title="fork函数"></a>fork函数</h3><p>fork（）函数通过系统调用创建一个与原来进程几乎完全相同的进程，也就是两个进程可以做完全相同的事，但如果初始参数或者传入的变量不同，两个进程也可以做不同的事。</p><p>一个进程调用fork（）函数后，系统先给新的进程分配资源，例如存储数据和代码的空间。然后把原来的进程的所有值都复制到新的新进程中，只有少数值与原来的进程的值不同。相当于克隆了一个自己。</p><p>当执行fork()函数后，会生成一个子进程，子进程的执行从fork()的返回值开始且代码继续往下执行。</p><p>fork()执行一次后会有两次返回值：第一次为原来的进程，即父进程会有一次返回值，表示新生成的子进程的进程ID；第二次为子进程的起始执行，返回值为0。</p><h4 id="fork函数的返回值"><a href="#fork函数的返回值" class="headerlink" title="fork函数的返回值"></a>fork函数的返回值</h4><p><strong>fpid=fork()值为什么在父子进程中不同。“其实就相当于链表，进程形成了链表，父进程的fpid(p 意味point)指向子进程的进程id, 因为子进程没有子进程，所以其fpid为0。</strong></p><p>fork()可能有三种不同的返回值：<br>1）在父进程中，fork返回新创建子进程的进程ID；<br>2）在子进程中，fork返回0；<br>3）如果出现错误，fork返回一个负值；</p><h4 id="fork出错的原因"><a href="#fork出错的原因" class="headerlink" title="fork出错的原因"></a>fork出错的原因</h4><p>1）当前的进程数已经达到了系统规定的上限，这时errno的值被设置为EAGAIN。<br>2）系统内存不足，这时errno的值被设置为ENOMEM。</p><h4 id="fork使用场景"><a href="#fork使用场景" class="headerlink" title="fork使用场景"></a>fork使用场景</h4><ul><li><p>守护进程<br>&emsp;&emsp;有时为了保护主进程不被杀，或者主进程异外退出后仍可再次启动(或后台运行)，就执行fork()让子进程监控主进程的运行状态，根据监听保护主进程的运行。</p></li><li><p>框架扩展<br>&emsp;&emsp;主进程只负责生成子进程，派出子进程去执行应用框架下的子任务，这些任务可能多变、可能更新频繁，但配合fork()及exec()函数，一切都是so easy..还保证了主进程的稳定，避免频繁更新程序。</p></li></ul><h2 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>管程的定义：由表示共享资源的抽象数据结构和对该共享数据结构的一组操作所组成的资源管理程序叫管程 。管程封装了共享资源及对于共享资源的操作，别的进程不能直接访问这些资源，因此管程也可以成为资源管理类。</p><ol><li>一个管程定义了一个数据结构和对该数据结构上的一组操作，这组操作能同步进程并改变管程中的数据。</li><li>局部于管程的数据结构，只能被局部于管程的操作所访问，任何管程之外的操作都不能访问它；反之，局部于管程的操作也只能访问管程内的数据结构。由此可见，管程相当于围墙，它把共享变量和对它进行操作的若干个过程围了起来，所有进程要访问临界资源时，都必须经过管程才能进入，而管程每次只允许一个进程进入管程，从而实现了进程的互斥。</li></ol><h3 id="管程的组成"><a href="#管程的组成" class="headerlink" title="管程的组成"></a>管程的组成</h3><ol><li>一个互斥锁：进入管程时加锁，离开管程时解锁 —— 用于确保了在一个时间点，最多只有一个线程占用该管程。</li><li>共享资源的数据结构：用于表示管程内部的共享资源</li><li>对共享资源（数据结构）的一组操作：用于同步进程并改变管程中的数据</li><li>一个用来避免竞态条件的不变量：用于判断管程内部的共享资源是否能被使用（在进入管程后，离开管程前判断）</li><li>紧急等待队列：用于存放等待管程或共享资源的使用权的进程</li></ol><h3 id="管程的优势"><a href="#管程的优势" class="headerlink" title="管程的优势"></a>管程的优势</h3><ol><li>集中化管理资源：管程实现了同一时刻最多只有一个线程执行管程的某个子程序。与那些通过修改数据结构实现互斥访问的并发程序设计相比，管程很大程度上简化了程序设计 —— 类似于将原来的分布式资源管理变成集中式资源管理。</li><li>互斥地使用管程：管程把共享变量和对它进行操作的若干个过程围了起来，所有进程要访问临界资源时，都必须经过管程才能进入，而管程每次只允许一个进程进入管程，从而实现了进程的互斥。</li><li>管程内部信息隐藏：管程外的进程或其他软件模块只能通过管程对外的接口来访问管程提供的操作，管程内部的实现细节对外界是透明的。</li><li>使系统中的各种硬件资源和软件资源，均可用数据结构抽象地描述其资源特性，即用少量信息和对资源所执行的操作来表示该资源，从而忽略它们的内部结构和实现细节。</li></ol><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="四个必要条件"><a href="#四个必要条件" class="headerlink" title="四个必要条件"></a>四个必要条件</h3><p>〈1〉互斥条件。即某个资源在一段时间内只能由一个进程占有，不能同时被两个或两个以上的进程占有。这种独占资源如CD-ROM驱动器，打印机等等，必须在占有该资源的进程主动释放它之后，其它进程才能占有该资源。这是由资源本身的属性所决定的。如独木桥就是一种独占资源，两方的人不能同时过桥。</p><p>〈2〉不可抢占条件。进程所获得的资源在未使用完毕之前，资源申请者不能强行地从资源占有者手中夺取资源，而只能由该资源的占有者进程自行释放。如过独木桥的人不能强迫对方后退，也不能非法地将对方推下桥，必须是桥上的人自己过桥后空出桥面（即主动释放占有资源），对方的人才能过桥。</p><p>〈3〉占有且申请条件。进程至少已经占有一个资源，但又申请新的资源；由于该资源已被另外进程占有，此时该进程阻塞；但是，它在等待新资源之时，仍继续占用已占有的资源。还以过独木桥为例，甲乙两人在桥上相遇。甲走过一段桥面（即占有了一些资源），还需要走其余的桥面（申请新的资源），但那部分桥面被乙占有（乙走过一段桥面）。甲过不去，前进不能，又不后退；乙也处于同样的状况。</p><p>〈4〉循环等待条件。存在一个进程等待序列{P1，P2，…，Pn}，其中P1等待P2所占有的某一资源，P2等待P3所占有的某一源，……，而Pn等待P1所占有的的某一资源，形成一个进程循环等待环。就像前面的过独木桥问题，甲等待乙占有的桥面，而乙又等待甲占有的桥面，从而彼此循环等待。</p><h3 id="解决死锁的策略"><a href="#解决死锁的策略" class="headerlink" title="解决死锁的策略"></a>解决死锁的策略</h3><p>(1) 死锁预防：破坏导致死锁必要条件中的任意一个就可以预防死锁。例如，要求用户申请资源时一次性申请所需要的全部资源，这就破坏了保持和等待条件；将资源分层，得到上一层资源后，才能够申请下一层资源，它破坏了环路等待条件。预防通常会降低系统的效率。</p><p>(2) 死锁避免：避免是指进程在每次申请资源时判断这些操作是否安全，例如，使用银行家算法。死锁避免算法的执行会增加系统的开销。</p><p>(3) 死锁检测：死锁预防和避免都是事前措施，而死锁的检测则是判断系统是否处于死锁状态，如果是，则执行死锁解除策略。</p><p>(4) 死锁解除：这是与死锁检测结合使用的，它使用的方式就是剥夺。即将某进程所拥有的资源强行收回，分配给其他的进程。</p><h3 id="鸵鸟算法"><a href="#鸵鸟算法" class="headerlink" title="鸵鸟算法"></a>鸵鸟算法</h3><p>该算法可以应用在极少发生死锁的的情况下。为什么叫鸵鸟算法呢，因为传说中鸵鸟看到危险就把头埋在地底下，可能鸵鸟觉得看不到危险也就没危险了吧。跟掩耳盗铃有点像。</p><h3 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h3><p>所谓银行家算法，是指在分配资源之前先看清楚，资源分配后是否会导致系统死锁。如果会死锁，则不分配，否则就分配。</p><p>按照银行家算法的思想，当进程请求资源时，系统将按如下原则分配系统资源：</p><p>(1) 当一个进程对资源的最大需求量不超过系统中的资源数时可以接纳该进程。</p><p>(2) 进程可以分期请求资源，当请求的总数不能超过最大需求量。</p><p>(3) 当系统现有的资源不能满足进程尚需资源数时，对进程的请求可以推迟分配，但总能使进程在有限的时间里得到资源。</p><p>(4) 当系统现有的资源能满足进程尚需资源数时，必须测试系统现存的资源能否满足该进程尚需的最大资源数，若能满足则按当前的申请量分配资源，否则也要推迟分配。</p><h2 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>&emsp;&emsp;内存映射，简而言之就是将内核空间的一段内存区域映射到用户空间。映射成功后，用户对这段内存区域的修改可以直接反映到内核空间，相反，内核空间对这段区域的修改也直接反映用户空间。那么对于内核空间与用户空间两者之间需要大量数据传输等操作的话效率是非常高的。当然，也可以将内核空间的一段内存区域同时映射到多个进程，这样还可以实现进程间的共享内存通信。</p><p>&emsp;&emsp;系统调用mmap()就是用来实现上面说的内存映射。最常见的操作就是文件（在Linux下设备也被看做文件）的操作，可以将某文件映射至内存(进程空间)，如此可以把对文件的操作转为对内存的操作，以此避免更多的lseek()与read()、write()操作，这点对于大文件或者频繁访问的文件而言尤其受益。</p><p>&emsp;&emsp;采用共享内存通信的一个显而易见的好处是效率高，因为进程可以直接读写内存，而不需要任何数据的拷贝。对于像管道和消息队列等通信方式，则需要在内核和用户空间进行四次的数据拷贝，而共享内存则只拷贝两次数据：一次从输入文件到共享内存区，另一次从共享内存区到输出文件。实际上，进程之间在共享内存时，并不总是读写少量数据后就解除映射，有新的通信时，再重新建立共享内存区域。而是保持共享区域，直到通信完毕为止，这样，数据内容一直保存在共享内存中，并没有写回文件。共享内存中的内容往往是在解除映射时才写回文件的。因此，采用共享内存的通信方式效率是非常高的。</p><img src="/2017/08/20/聊聊操作系统/mmap.JPG" title="mmap"><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>1、提高I/O效率<br>2、匿名内存映射<br>3、共享内存进程通信 </p><h3 id="mmap-函数"><a href="#mmap-函数" class="headerlink" title="mmap()函数"></a>mmap()函数</h3><p>&emsp;&emsp;用户空间mmap()函数的形式如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mmap</span><span class="params">(<span class="keyword">void</span> *start, <span class="keyword">size_t</span> length, <span class="keyword">int</span> prot, <span class="keyword">int</span> flags,<span class="keyword">int</span> fd, <span class="keyword">off_t</span> offset)</span></span></span><br></pre></td></tr></table></figure></p><p>下面就其参数解释如下：</p><ul><li>start：用户进程中要映射的用户空间的起始地址，通常为NULL（由内核来指定）</li><li>length：要映射的内存区域的大小</li><li>prot：期望的内存保护标志</li><li>flags：指定映射对象的类型</li><li>fd：文件描述符（由open函数返回）</li><li>offset：设置在内核空间中已经分配好的的内存区域中的偏移，例如文件的偏移量，大小为PAGE_SIZE的整数倍</li><li>返回值：mmap()返回被映射区的指针，该指针就是需要映射的内核空间在用户空间的虚拟地址</li></ul><h3 id="匿名内存映射"><a href="#匿名内存映射" class="headerlink" title="匿名内存映射"></a>匿名内存映射</h3><p>&emsp;&emsp;匿名映射是指参数fd=-1的映射，此时不通过文件共享内存，适用于父子进程之间。在父进程中先调用mmap()，然后调用 fork()。那么在调用fork()之后，子进程继承父进程匿名映射后的地址空间，同样也继承mmap()返回的地址，这样，父子进程就可以通过映射区 域进行通信了。注意，这里不是一般的继承关系。一般来说，子进程单独维护从父进程继承下来的一些变量。而mmap()返回的地址，却由父子进程共同维护。 对于具有亲缘关系的进程实现共享内存最好的方式应该是采用匿名内存映射的方式。</p><h3 id="使用mmap的细节"><a href="#使用mmap的细节" class="headerlink" title="使用mmap的细节"></a>使用mmap的细节</h3><p>1、使用mmap需要注意的一个关键点是，mmap映射区域大小必须是物理页大小(page_size)的整倍数（32位系统中通常是4k字节）。原因是，内存的最小粒度是页，而进程虚拟地址空间和内存的映射也是以页为单位。为了匹配内存的操作，mmap从磁盘到虚拟地址空间的映射也必须是页。</p><p>2、内核可以跟踪被内存映射的底层对象（文件）的大小，进程可以合法的访问在当前文件大小以内又在内存映射区以内的那些字节。也就是说，如果文件的大小一直在扩张，只要在映射区域范围内的数据，进程都可以合法得到，这和映射建立时文件的大小无关。具体情形参见“情形三”。</p><p>3、映射建立之后，即使文件关闭，映射依然存在。因为映射的是磁盘的地址，不是文件本身，和文件句柄无关。同时可用于进程间通信的有效地址空间不完全受限于被映射文件的大小，因为是按页映射。</p><h3 id="使用mmap的优点"><a href="#使用mmap的优点" class="headerlink" title="使用mmap的优点"></a>使用mmap的优点</h3><p>1、对文件的读取操作跨过了页缓存，减少了数据的拷贝次数，用内存读写取代I/O读写，提高了文件读取效率。</p><p>2、实现了用户空间和内核空间的高效交互方式。两空间的各自修改操作可以直接反映在映射的区域内，从而被对方空间及时捕捉。</p><p>3、提供进程间共享内存及相互通信的方式。不管是父子进程还是无亲缘关系的进程，都可以将自身用户空间映射到同一个文件或匿名映射到同一片区域。从而通过各自对映射区域的改动，达到进程间通信和进程间共享的目的。</p><pre><code>同时，如果进程A和进程B都映射了区域C，当A第一次读取C时通过缺页从磁盘复制文件页到内存中；但当B再读C的相同页面时，虽然也会产生缺页异常，但是不再需要从磁盘中复制文件过来，而可直接使用已经保存在内存中的文件数据。</code></pre><p>4、可用于实现高效的大规模数据传输。内存空间不足，是制约大数据操作的一个方面，解决方案往往是借助硬盘空间协助操作，补充内存的不足。但是进一步会造成大量的文件I/O操作，极大影响效率。这个问题可以通过mmap映射很好的解决。换句话说，但凡是需要用磁盘空间代替内存的时候，mmap都可以发挥其功效。</p><h3 id="相关的系统调用"><a href="#相关的系统调用" class="headerlink" title="相关的系统调用"></a>相关的系统调用</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">munmap</span><span class="params">( <span class="keyword">void</span> * addr, <span class="keyword">size_t</span> len )</span></span></span><br></pre></td></tr></table></figure><p>　　该调用在进程地址空间中解除一个映射关系，addr是调用mmap()时返回的地址，len是映射区的大小。当映射关系解除，对原来映射地址的访问将导致段错误发生。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msync</span> <span class="params">( <span class="keyword">void</span> * addr , <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags)</span></span></span><br></pre></td></tr></table></figure><p>　　一般说来，进程在映射空间的对共享内容的改变并不直接写回到磁盘文件中，往往在调用munmap（）后才执行该操作。可以通过调用msync()实现磁盘上文件内容与共享内存区的内容一致。</p>]]></content>
    
    <summary type="html">
    
      &lt;!--TOC--&gt;
&lt;h2 id=&quot;Linux&quot;&gt;&lt;a href=&quot;#Linux&quot; class=&quot;headerlink&quot; title=&quot;Linux&quot;&gt;&lt;/a&gt;Linux&lt;/h2&gt;&lt;h3 id=&quot;SWAP的概述&quot;&gt;&lt;a href=&quot;#SWAP的概述&quot; class=&quot;headerlink&quot; title=&quot;SWAP的概述&quot;&gt;&lt;/a&gt;SWAP的概述&lt;/h3&gt;&lt;p&gt;SWAP就是LINUX下的虚拟内存分区，它的作用是在物理内存使用完之后,将磁盘空间(也就是SWAP分区)虚拟成内存来使用。&lt;/p&gt;
    
    </summary>
    
      <category term="聚沙成塔" scheme="/categories/record/"/>
    
    
      <category term="Operating System" scheme="/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>I/O多路复用</title>
    <link href="/2017/08/20/I-O%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    <id>/2017/08/20/I-O多路复用/</id>
    <published>2017-08-20T13:04:13.000Z</published>
    <updated>2019-07-15T02:16:33.544Z</updated>
    
    <content type="html"><![CDATA[<!--TOC--><p>&emsp;&emsp;select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。关于这三种IO多路复用的用法，前面三篇总结写的很清楚，并用服务器回射echo程序进行了测试。<br><a id="more"></a></p><h2 id="阻塞-I-O（blocking-IO）"><a href="#阻塞-I-O（blocking-IO）" class="headerlink" title="阻塞 I/O（blocking IO）"></a>阻塞 I/O（blocking IO）</h2><img src="/2017/08/20/I-O多路复用/阻塞I-O模型.PNG" title="阻塞I-O模型"><p>当用户进程调用了recvfrom这个系统调用，kernel就开始了IO的第一个阶段：准备数据（对于网络IO来说，很多时候数据在一开始还没有到达。比如，还没有收到一个完整的UDP包。这个时候kernel就要等待足够的数据到来）。这个过程需要等待，也就是说数据被拷贝到操作系统内核的缓冲区中是需要一个过程的。而在用户进程这边，整个进程会被阻塞（当然，是进程自己选择的阻塞）。当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返回结果，用户进程才解除block的状态，重新运行起来。</p><p><strong>所以，blocking IO的特点就是在IO执行的两个阶段都被block了。</strong></p><h2 id="非阻塞-I-O（nonblocking-IO）"><a href="#非阻塞-I-O（nonblocking-IO）" class="headerlink" title="非阻塞 I/O（nonblocking IO）"></a>非阻塞 I/O（nonblocking IO）</h2><img src="/2017/08/20/I-O多路复用/非阻塞I-O模型.PNG" title="非阻塞I-O模型"><p>当用户进程发出read操作时，如果kernel中的数据还没有准备好，那么它并不会block用户进程，而是立刻返回一个error。从用户进程角度讲，它发起一个read操作后，并不需要等待，而是马上就得到了一个结果。用户进程判断结果是一个error时，它就知道数据还没有准备好，于是它可以再次发送read操作。一旦kernel中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上就将数据拷贝到了用户内存，然后返回。</p><p><strong>所以，nonblocking IO的特点是用户进程需要不断的主动询问kernel数据好了没有。</strong></p><h2 id="I-O-多路复用（IO-multiplexing）"><a href="#I-O-多路复用（IO-multiplexing）" class="headerlink" title="I/O 多路复用（IO multiplexing）"></a>I/O 多路复用（IO multiplexing）</h2><img src="/2017/08/20/I-O多路复用/I-O多路复用模型.PNG" title="I-O多路复用模型"><p>IO multiplexing就是我们说的select，poll，epoll，有些地方也称这种IO方式为event driven IO。select/epoll的好处就在于单个process就可以同时处理多个网络连接的IO。它的基本原理就是select，poll，epoll这个function会不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程。</p><p>当用户进程调用了select，那么整个进程会被block，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。</p><p>所以，I/O 多路复用的特点是通过一种机制一个进程能同时等待多个文件描述符，而这些文件描述符（套接字描述符）其中的任意一个进入读就绪状态，select()函数就可以返回。</p><p>这个图和blocking IO的图其实并没有太大的不同，事实上，还更差一些。因为这里需要使用两个system call (select 和 recvfrom)，而blocking IO只调用了一个system call (recvfrom)。但是，用select的优势在于它可以同时处理多个connection。</p><p>所以，如果处理的连接数不是很高的话，使用select/epoll的web server不一定比使用multi-threading + blocking IO的web server性能更好，可能延迟还更大。<strong>select/epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。</strong>）</p><p>在IO multiplexing Model中，实际中，对于每一个socket，一般都设置成为non-blocking，但是，如上图所示，整个用户的process其实是一直被block的。只不过process是被select这个函数block，而不是被socket IO给block。</p><h2 id="异步-I-O（asynchronous-IO）"><a href="#异步-I-O（asynchronous-IO）" class="headerlink" title="异步 I/O（asynchronous IO）"></a>异步 I/O（asynchronous IO）</h2><img src="/2017/08/20/I-O多路复用/异步I-O模型.PNG" title="异步I-O模型"><p>用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从kernel的角度，当它受到一个asynchronous read之后，首先它会立刻返回，所以不会对用户进程产生任何block。然后，kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了。</p><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><img src="/2017/08/20/I-O多路复用/I-O模型对比图.PNG" title="I-O模型对比图"><p>通过上面的图片，可以发现non-blocking IO和asynchronous IO的区别还是很明显的。在non-blocking IO中，虽然进程大部分时间都不会被block，但是它仍然要求进程去主动的check，并且当数据准备完成以后，也需要进程主动的再次调用recvfrom来将数据拷贝到用户内存。而asynchronous IO则完全不同。它就像是用户进程将整个IO操作交给了他人（kernel）完成，然后他人做完后发信号通知。在此期间，用户进程不需要去检查IO操作的状态，也不需要主动的去拷贝数据。</p><h3 id="blocking和non-blocking的区别"><a href="#blocking和non-blocking的区别" class="headerlink" title="blocking和non-blocking的区别"></a>blocking和non-blocking的区别</h3><p>调用blocking IO会一直block住对应的进程直到操作完成，而non-blocking IO在kernel还准备数据的情况下会立刻返回。</p><h3 id="synchronous-IO和asynchronous-IO的区别"><a href="#synchronous-IO和asynchronous-IO的区别" class="headerlink" title="synchronous IO和asynchronous IO的区别"></a>synchronous IO和asynchronous IO的区别</h3><p>两者的区别就在于synchronous IO做”IO operation”的时候会将process阻塞。按照这个定义，之前所述的blocking IO，non-blocking IO，IO multiplexing都属于synchronous IO。</p><p>有人会说，non-blocking IO并没有被block啊。这里有个非常“狡猾”的地方，定义中所指的”IO operation”是指真实的IO操作，就是例子中的recvfrom这个system call。non-blocking IO在执行recvfrom这个system call的时候，如果kernel的数据没有准备好，这时候不会block进程。但是，当kernel中数据准备好的时候，recvfrom会将数据从kernel拷贝到用户内存中，这个时候进程是被block了，在这段时间内，进程是被block的。</p><h2 id="I-O多路复用详解"><a href="#I-O多路复用详解" class="headerlink" title="I/O多路复用详解"></a>I/O多路复用详解</h2><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int <span class="keyword">select</span> (<span class="built_in">int</span> n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, <span class="keyword">struct</span> timeval *<span class="keyword">timeout</span>);</span><br></pre></td></tr></table></figure><p>select函数监视的文件描述符分3类，分别是writefds、readfds、和exceptfds。调用后select函数会阻塞，直到有描述副就绪（有数据可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以 通过遍历fdset，来找到就绪的描述符。</p><p>select目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点。select的一 个缺点在于单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024，可以通过修改宏定义甚至重新编译内核的方式提升这一限制，但 是这样也会造成效率的降低。</p><h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span> <span class="params">(struct pollfd *fds, <span class="keyword">unsigned</span> <span class="keyword">int</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure><p>pollfd结构包含了要监视的event和发生的event，不再使用select“参数-值”传递的方式。同时，pollfd并没有最大数量限制（但是数量过大后性能也是会下降）。 和select函数一样，poll返回后，需要轮询pollfd来获取就绪的描述符。</p><h3 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span>(<span class="params"><span class="keyword">int</span> size</span>)；<span class="comment">//创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span>(<span class="params"><span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, <span class="keyword">struct</span> epoll_event *<span class="keyword">event</span></span>)；</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span>(<span class="params"><span class="keyword">int</span> epfd, <span class="keyword">struct</span> epoll_event * events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout</span>)</span>;</span><br></pre></td></tr></table></figure><p>epoll是在2.6内核中提出的，是之前的select和poll的增强版本。相对于select和poll来说，epoll更加灵活，没有描述符限制。epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次。</p><p>在select/poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而epoll事先通过epoll_ctl()来注册一 个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait() 时便得到通知。(此处去掉了遍历文件描述符，而是通过监听回调的的机制。这正是epoll的魅力所在。)</p><h1 id="epoll与select-poll的比较"><a href="#epoll与select-poll的比较" class="headerlink" title="epoll与select/poll的比较"></a><strong>epoll与select/poll的比较</strong></h1><p>select的几大缺点：</p><p>每次调用select，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大</p><p>同时每次调用select都需要在内核遍历传递进来的所有fd，这个开销在fd很多时也很大</p><p>select支持的文件描述符数量太小了，默认是1024</p><p>=============</p><p>epoll既然是对select和poll的改进，就应该能避免上述的三个缺点。那epoll都是怎么解决的呢？在此之前，我们先看一下epoll和select和poll的调用接口上的不同，select和poll都只提供了一个函数——select或者poll函数。而epoll提供了三个函数，epoll_create,epoll_ctl和epoll_wait，epoll_create是创建一个epoll句柄；epoll_ctl是注册要监听的事件类型；epoll_wait则是等待事件的产生。</p><p>对于第一个缺点，epoll的解决方案在epoll_ctl函数中。每次注册新的事件到epoll句柄中时（在epoll_ctl中指定EPOLL_CTL_ADD），会把所有的fd拷贝进内核，而不是在epoll_wait的时候重复拷贝。epoll保证了每个fd在整个过程中只会拷贝一次。</p><p>对于第二个缺点，epoll的解决方案不像select或poll一样每次都把current轮流加入fd对应的设备等待队列中，而只在epoll_ctl时把current挂一遍（这一遍必不可少）并为每个fd指定一个回调函数，当设备就绪，唤醒等待队列上的等待者时，就会调用这个回调函数，而这个回调函数会把就绪的fd加入一个就绪链表）。epoll_wait的工作实际上就是在这个就绪链表中查看有没有就绪的fd（利用schedule_timeout()实现睡一会，判断一会的效果，和select实现中的第7步是类似的）。</p><p>对于第三个缺点，epoll没有这个限制，它所支持的FD上限是最大可以打开文件的数目，这个数字一般远大于2048,举个例子,在1GB内存的机器上大约是10万左右，具体数目可以cat /proc/sys/fs/file-max察看,一般来说这个数目和系统内存关系很大。</p><p>=============</p><p><strong>epoll与select/poll的小结</strong><br>1、监视的描述符数量不受限制，它所支持的FD上限是最大可以打开文件的数目，这个数字一般远大于2048,举个例子,在1GB内存的机器上大约是10万左右<br>2、IO的效率不会随着监视fd的数量的增长而下降。epoll不同于select和poll轮询的方式，而是通过每个fd定义的回调函数来实现的。只有就绪的fd才会执行回调函数。<br>3、epoll支持LT、ET两种工作模式，而select/poll只支持LT。</p><h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h2><ol><li>LT模式（水平触发）</li></ol><p>LT(level triggered)是缺省的工作方式，并且同时支持block和no-block socket.在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的fd进行IO操作。如果你不作任何操作，内核还是会继续通知你的。</p><p>通俗地讲，当被监控的文件描述符上有可读写事件发生时，epoll_wait()会通知处理程序去读写。如果这次没有把数据一次性全部读写完(如读写缓冲区太小)，那么下次调用 epoll_wait()时，它还会通知你在上没读写完的文件描述符上继续读写，当然如果你一直不去读写，它会一直通知你！！！如果系统中有大量你不需要读写的就绪文件描述符，而它们每次都会返回，这样会大大降低处理程序检索自己关心的就绪文件描述符的效率！！！</p><ol start="2"><li>ET模式（边沿触发）</li></ol><p>ET(edge-triggered)是高速工作方式，只支持no-block socket。在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，直到你做了某些操作导致那个文件描述符不再为就绪状态了(比如，你在发送，接收或者接收请求，或者发送接收的数据少于一定量时导致了一个EWOULDBLOCK 错误）。但是请注意，如果一直不对这个fd作IO操作(从而导致它再次变成未就绪)，内核不会发送更多的通知(only once)</p><p>通俗地讲，当被监控的文件描述符上有可读写事件发生时，epoll_wait()会通知处理程序去读写。如果这次没有把数据全部读写完(如读写缓冲区太小)，那么下次调用epoll_wait()时，它不会通知你，也就是它只会通知你一次，直到该文件描述符上出现第二次可读写事件才会通知你！！！这种模式比水平触发效率高，系统不会充斥大量你不关心的就绪文件描述符！！！</p><p>ET模式在很大程度上减少了epoll事件被重复触发的次数，因此效率要比LT模式高。epoll工作在ET模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</p>]]></content>
    
    <summary type="html">
    
      &lt;!--TOC--&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。关于这三种IO多路复用的用法，前面三篇总结写的很清楚，并用服务器回射echo程序进行了测试。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="聚沙成塔" scheme="/categories/record/"/>
    
    
      <category term="Operating System" scheme="/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>TCP/UDP的归纳总结</title>
    <link href="/2017/08/20/TCP-UDP%E7%9A%84%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/"/>
    <id>/2017/08/20/TCP-UDP的归纳总结/</id>
    <published>2017-08-20T10:39:36.000Z</published>
    <updated>2019-07-15T02:16:33.578Z</updated>
    
    <content type="html"><![CDATA[<!--TOC--><p>&emsp;&emsp;运输层是整个网络体系结构中的关键层次之一，它有一个很重要的功能就是复用和分用。这里的“复用”是指在发送方不同的应用进程都可以使用同一个运输层协议传输数据，而“分用”是指接收方的运输层在剥去报文的首部后就能够把这些数据正确交付到目的应用进程。<br><a id="more"></a></p><p>从这里可以看出网络层和运输层有明显的区别。网络层是为主机之间提供逻辑通信，而运输层为应用进程之间提供端到端的逻辑通信。</p><h2 id="用户数据协议UDP的特点"><a href="#用户数据协议UDP的特点" class="headerlink" title="用户数据协议UDP的特点"></a>用户数据协议UDP的特点</h2><ul><li><p>UDP是无连接的，即发送数据之前不需要建立连接（当然发送数据结束时也没有连接可以释放），因此减少了开销和发送数据之前的时延。</p></li><li><p>UDP使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的连接状态表。</p></li><li><p>UDP是面向报文的。发送方的UDP对应用程序交下来的报文，在添加手部后就向下交付给IP层。UDP对应用层家下来的报文，既不合并，也不拆分，而是保留这些文件的边界。</p></li><li><p>UDP没有拥塞控制，因此网络出现的拥塞不会使源主机的发送速率降低。这对实时应用是很重要的。很多实时应用（如IP电话、实时视频会议等）要求源主机以恒定的速率发送数据，并且允许在网络发生拥塞时丢失一些数据，但却不允许数据有太大的时延。</p></li><li><p>UDP支持一对一、一对多、多对一和多对多的交互通信。</p></li><li><p>UDP的首部开销校，只有8个字节，比TCP的20个字节的首部要短。</p></li></ul><h2 id="UDP的首部格式"><a href="#UDP的首部格式" class="headerlink" title="UDP的首部格式"></a>UDP的首部格式</h2><img src="/2017/08/20/TCP-UDP的归纳总结/UDP用户数据报的首部和伪首部.JPG" title="UDP用户数据报的首部和伪首部"><p>&emsp;&emsp;用户数据包UDP有两个字段：数据字段和首部字段。首部字段很简单，只有8个字节，由四个字段组成，每个字段的长度都是两个字节。各字段意义如下：<br>(1)源端口：    源端口号，在需要对方回信时选用，不需要时可用全0。<br>(2)目的端口：    目的端口号。这在重点交付报文时必须要使用到。<br>(3)长度：    UDP用户数据包的长度，其最小值是8（仅有首部）<br>(4)检验和：    检测UDP用户数据包在传输中是否有错。有错就丢弃。<br>注意：IP数据包的检验和只检验IP数据包的首部，但UDP的检验和是把首部和数据部分一起都检验。</p><h2 id="传输控制协议TCP的特点"><a href="#传输控制协议TCP的特点" class="headerlink" title="传输控制协议TCP的特点"></a>传输控制协议TCP的特点</h2><ul><li><p>TCP是面向连接的运输层协议。这就是说，应用程序在使用TCP协议之前，必须先建立TCP连接。在传输数据完毕后，必须释放已经建立的TCP连接。</p></li><li><p>每一条TCP连接只能有两个端点。每一条TCP连接只能是点对点的（一对一）。</p></li><li><p>TCP提供可靠交付的服务。也就是说，通过TCP连接传送的数据，无差错、不丢失、不重复、并且按序到达。</p></li><li><p>TCP提供全双工通信。TCP允许通信双方的应用进程在任何时候都能发送数据。TCP连接的两端都设有发送缓存和接收缓存，用来临时存放双向通信的数据。在发送时，应用程序在把数据传送给TCP缓存后，就可以做自己的事，而TCP在合适的时候把数据发送出去。在接收时，TCP把收到的数据放入缓存，上层的应用进程在合适的时候读取缓存中的数据。</p></li><li><p>面向字节流。TCP中的“流”指的是流入到进程或从进程流出的字节序列。“面向字节流”的含义是虽然应用程序和TCP的交互是一次一个数据块（大小不等），但TCP把应用程序交下来的数据看成仅仅是一连串的无结构字节流。TCP并不知道所传送的字节流的含义。TCP不保证接收方应用程序所收到的数据块和发送方应用程序所发出的数据块具有对应大小的关系。</p></li></ul><h2 id="TCP报文段的首部格式"><a href="#TCP报文段的首部格式" class="headerlink" title="TCP报文段的首部格式"></a>TCP报文段的首部格式</h2><p>TCP虽然是面向字节流的，但TCP传送的数据单元却是报文段。一个TCP报文段分为首部和数据两部分。TCP报文段首部的前20个字节是固定的，后面有4N字节是根据需要而增加的选项。所以TCP首部的最小长度是20字节。</p><img src="/2017/08/20/TCP-UDP的归纳总结/TCP报文段的首部格式.JPG" title="TCP报文段的首部格式"><p>(1)源端口和目的端口：    各占两个字节，与UDP的分用相似，TCP的分用功能也是通过端口实现。</p><p>(2)序号：    占4字节。TCP是面向字节流的。在一个TCP连接中传送的字节流中的每一个字节都按顺序编号。整个要传送的字节流的起始序号必须在连接建立时设置。首部中的序号字段值指的是本报文段所发送的数据的第一个字节的序号。</p><p>(3)确认号：    占4字节。是期望收到对方下一个报文段的第一个数据字节的序号。<br><strong>若确认号=N，则表明：到序号N-1为止的所有数据都已正确收到。</strong></p><p>(4)数据偏移：    占4bit。他指出TCP报文段的数据起始处距离TCP报文段的起始处有多远。这个字段实际上指出TCP报文段的首部长度。</p><p>(5)保留：    占6bit。保留为今后使用，目前应置为0。</p><p>(6)紧急URG：    1bit。当URG=1时，表明紧急指针字段有效。他告诉系统此报文段中有紧急数据，应尽快传送，而不按原来的排队顺序来传送。于是发送方TCP就把紧急数据插入到本报文段数据的最前面，而在紧急数据后面的数据仍是普通数据，这时要与首部中紧急指针字段配合使用。</p><p>(7)确认ACK：    1bit。仅当ACK=1时确认号字段才有效。当ACK=0时，确认号无效。TCP规定，在连接建立后所有传送的报文段都必须把ACK置为1。</p><p>(8)推送PSH：    1bit。当两个应用进程进行交互式通信时，有时在一端的应用进程希望在键入一个命令后立即就能够收到对方的响应。在这种情况下，TCP就可以使用推送操作。这时，发送方TCP把PSH置为1，并立即创建一个报文段发送出去。接收方TCP收到PSH=1的报文段，就尽快地交付给接收应用进程，而不再等到整个缓存都填满了之后再向上交付。</p><p>(9)复位RST：    1bit。当RST=1时，表明TCP连接中出现严重差错，必须释放连接，然后再重新建立运输连接。RST置为1还用来拒绝一个非法的报文段或拒绝打开一个连接。</p><p>(10)同步SYN：    1bit。在连接建立时用来同步序号。当SYN=1而ACK=0时，表明这是一个连接请求报文段。对方若同意建立连接，则应在响应的报文段中使SYN=1和ACK=1。因此，SYN置为1表示这是一个连接请求或连接接收报文。</p><p>(11)终止FIN：    1bit。用来释放一个连接。当FIN=1时，表明此报文段的发送方的数据已发送完毕，并要求释放运输连接。</p><p>(12)窗口：    占2个字节。窗口值是0~2^16-1之间的整数。窗口指的是发送本报文段的一方的接收窗口。窗口值告诉对方：从本报文段首部中的确认号算起，接收方目前允许对方放松的数据量。窗口值作为接收方让发送方设置其发送窗口的依据。</p><p>(13)检验和：    占2个字节。检验和字段检验的范围包括首部和数据两部分。和UDP用户数据报一样，在计算检验和时，要在TCP报文段的前面加上12字节的伪首部。TCP的协议号为6，</p><p>(14)紧急指针：    占2个字节。紧急指针仅在URG=1时有意义，它指出本报文段中的紧急数据的字节数，紧急指针指出了紧急数据的末尾在报文段中的位置。值得注意的是，即使窗口为0时也可放松紧急数据。</p><p>(15)选项：    长度可变，最长可达40字节。当没有使用选项时，TCP的首部长度是20字节。TCP的最大报文段长度MSS默认情况下536字节。MSS是每一个TCP报文段中的数据字段的最大长度。</p><h2 id="TCP可靠传输的实现"><a href="#TCP可靠传输的实现" class="headerlink" title="TCP可靠传输的实现"></a>TCP可靠传输的实现</h2><ol><li><p>以字节为单位的滑动窗口</p></li><li><p>超时重传时间的选择</p></li><li><p>选择确认SACK</p></li></ol><h2 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h2><ol><li>利用滑动窗口实现流量控制</li></ol><p><strong>注意：可靠传输和流量控制是通过滑动窗口实现的，而拥塞控制是由拥塞窗口来控制的，两者切不可搞混！</strong></p><h2 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h2><h3 id="慢开始和拥塞避免"><a href="#慢开始和拥塞避免" class="headerlink" title="慢开始和拥塞避免"></a>慢开始和拥塞避免</h3><img src="/2017/08/20/TCP-UDP的归纳总结/慢开始和拥塞避免.JPG" title="慢开始和拥塞避免"><h3 id="快重传和快恢复"><a href="#快重传和快恢复" class="headerlink" title="快重传和快恢复"></a>快重传和快恢复</h3><img src="/2017/08/20/TCP-UDP的归纳总结/快重传和快恢复.JPG" title="快重传和快恢复"><h2 id="TCP的运输连接管理"><a href="#TCP的运输连接管理" class="headerlink" title="TCP的运输连接管理"></a>TCP的运输连接管理</h2><h3 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h3><img src="/2017/08/20/TCP-UDP的归纳总结/TCP三次握手.JPG" title="TCP三次握手"><h3 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h3><img src="/2017/08/20/TCP-UDP的归纳总结/TCP连接释放过程.JPG" title="TCP连接释放过程.JPG"><h3 id="TCP的有限状态机"><a href="#TCP的有限状态机" class="headerlink" title="TCP的有限状态机"></a>TCP的有限状态机</h3><img src="/2017/08/20/TCP-UDP的归纳总结/TCP的有限状态机.JPG" title="TCP的有限状态机.JPG"><h3 id="为什么A在TIME-WAIT状态必须等待2MSL（最大报文段寿命，Maximum-Segment-Lifetime）？"><a href="#为什么A在TIME-WAIT状态必须等待2MSL（最大报文段寿命，Maximum-Segment-Lifetime）？" class="headerlink" title="为什么A在TIME-WAIT状态必须等待2MSL（最大报文段寿命，Maximum Segment Lifetime）？"></a>为什么A在TIME-WAIT状态必须等待2MSL（最大报文段寿命，Maximum Segment Lifetime）？</h3><p>&emsp;&emsp;第一，为了保证A发送的最后一个ACK报文段能够到达B。这个ACK报文段有可能丢失，因而使处在LAST-ACK状态的B收不到对已发送的FIN+ACK报文段的确认。B会超时重传这个FIN+ACK报文段，而A就能在2MSL时间内收到这个重传的FIN+ACK报文段。接着A重传一次确认，重新启动2MSL计时器。最后A和B都正常进入到CLOSED状态。如果A在TIME-WAIT状态不等待一段时间，而是在发送完ACK报文段后立即释放连接，那么就无法收到B重传的FIN+ACK报文段，因而也不会再发送一次确认报文段。这样，B就无法按照正常步骤进入CLOSED状态。</p><p>&emsp;&emsp;第二，防止“已失效的连接请求报文段”出现在本链接中。A在发送完最后一个ACK报文段后，再经过实践2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。B只要收到了A发出的确认，就进入CLOSED状态。同样，B在撤销响应的传输控制块TCB后，就结束了这次的TCP连接。</p><h2 id="在浏览器中输入www-baidu-com后执行的全部过程"><a href="#在浏览器中输入www-baidu-com后执行的全部过程" class="headerlink" title="在浏览器中输入www.baidu.com后执行的全部过程"></a>在浏览器中输入<a href="http://www.baidu.com后执行的全部过程" target="_blank" rel="noopener">www.baidu.com后执行的全部过程</a></h2><p>1、客户端浏览器通过DNS解析到<a href="http://www.baidu.com的IP地址220.181.27.48，通过这个IP地址找到客户端到服务器的路径。客户端浏览器发起一个HTTP会话到220.161.27.48，然后通过TCP进行封装数据包，输入到网络层。" target="_blank" rel="noopener">www.baidu.com的IP地址220.181.27.48，通过这个IP地址找到客户端到服务器的路径。客户端浏览器发起一个HTTP会话到220.161.27.48，然后通过TCP进行封装数据包，输入到网络层。</a></p><p>2、在客户端的传输层，把HTTP会话请求分成报文段，添加源和目的端口，如服务器使用80端口监听客户端的请求，客户端由系统随机选择一个端口如5000，与服务器进行交换，服务器把相应的请求返回给客户端的5000端口。然后使用IP层的IP地址查找目的端。</p><p>3、客户端的网络层不用关系应用层或者传输层的东西，主要做的是通过查找路由表确定如何到达服务器，期间可能经过多个路由器，这些都是由路由器来完成的工作，我不作过多的描述，无非就是通过查找路由表决定通过那个路径到达服务器。</p><p>4、客户端的链路层，包通过链路层发送到路由器，通过邻居协议查找给定IP地址的MAC地址，然后发送ARP请求查找目的地址，如果得到回应后就可以使用ARP的请求应答交换的IP数据包现在就可以传输了，然后发送IP数据包到达服务器的地址。</p><h2 id="扩展问题"><a href="#扩展问题" class="headerlink" title="扩展问题"></a>扩展问题</h2><h3 id="DNS域名系统，简单描述其工作原理。"><a href="#DNS域名系统，简单描述其工作原理。" class="headerlink" title="DNS域名系统，简单描述其工作原理。"></a>DNS域名系统，简单描述其工作原理。</h3><p>当DNS客户机需要在程序中使用名称时，它会查询DNS服务器来解析该名称。客户机发送的每条查询信息包括三条信息：包括：指定的DNS域名，指定的查询类型，DNS域名的指定类别。基于UDP服务，端口53. 该应用一般不直接为用户使用，而是为其他应用服务，如HTTP，SMTP等在其中需要完成主机名到IP地址的转换。</p><h3 id="面向连接和非面向连接的服务的特点是什么？"><a href="#面向连接和非面向连接的服务的特点是什么？" class="headerlink" title="面向连接和非面向连接的服务的特点是什么？"></a>面向连接和非面向连接的服务的特点是什么？</h3><p>面向连接的服务，通信双方在进行通信之前，要先在双方建立起一个完整的可以彼此沟通的通道，在通信过程中，整个连接的情况一直可以被实时地监控和管理。</p><p>非面向连接的服务，不需要预先建立一个联络两个通信节点的连接，需要通信的时候，发送节点就可以往网络上发送信息，让信息自主地在网络上去传，一般在传输的过程中不再加以监控。</p><h3 id="TCP的三次握手过程？为什么会采用三次握手，若采用二次握手可以吗？"><a href="#TCP的三次握手过程？为什么会采用三次握手，若采用二次握手可以吗？" class="headerlink" title="TCP的三次握手过程？为什么会采用三次握手，若采用二次握手可以吗？"></a>TCP的三次握手过程？为什么会采用三次握手，若采用二次握手可以吗？</h3><p>答：建立连接的过程是利用客户服务器模式，假设主机A为客户端，主机B为服务器端。</p><p>（1）TCP的三次握手过程：主机A向B发送连接请求；主机B对收到的主机A的报文段进行确认；主机A再次对主机B的确认进行确认。</p><p>（2）采用三次握手是为了防止失效的连接请求报文段突然又传送到主机B，因而产生错误。失效的连接请求报文段是指：主机A发出的连接请求没有收到主机B的确认，于是经过一段时间后，主机A又重新向主机B发送连接请求，且建立成功，顺序完成数据传输。考虑这样一种特殊情况，主机A第一次发送的连接请求并没有丢失，而是因为网络节点导致延迟达到主机B，主机B以为是主机A又发起的新连接，于是主机B同意连接，并向主机A发回确认，但是此时主机A根本不会理会，主机B就一直在等待主机A发送数据，导致主机B的资源浪费。</p>]]></content>
    
    <summary type="html">
    
      &lt;!--TOC--&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;运输层是整个网络体系结构中的关键层次之一，它有一个很重要的功能就是复用和分用。这里的“复用”是指在发送方不同的应用进程都可以使用同一个运输层协议传输数据，而“分用”是指接收方的运输层在剥去报文的首部后就能够把这些数据正确交付到目的应用进程。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="聚沙成塔" scheme="/categories/record/"/>
    
    
      <category term="record" scheme="/tags/record/"/>
    
      <category term="network" scheme="/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>Cookie/Session机制</title>
    <link href="/2017/08/19/Cookie-Session%E6%9C%BA%E5%88%B6/"/>
    <id>/2017/08/19/Cookie-Session机制/</id>
    <published>2017-08-19T13:14:53.000Z</published>
    <updated>2019-07-15T02:16:33.537Z</updated>
    
    <content type="html"><![CDATA[<!--TOC--><p>&emsp;&emsp;会话（Session）跟踪是Web程序中常用的技术，用来跟踪用户的整个会话。常用的会话跟踪技术是Cookie与Session。Cookie通过在客户端记录信息确定用户身份，Session通过在服务器端记录信息确定用户身份。<br><a id="more"></a></p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>在程序中，会话跟踪是很重要的事情。理论上，一个用户的所有请求操作都应该属于同一个会话，而另一个用户的所有请求操作则应该属于另一个会话，二者不能混淆。例如，用户A在超市购买的任何商品都应该放在A的购物车内，不论是用户A什么时间购买的，这都是属于同一个会话的，不能放入用户B或用户C的购物车内，这不属于同一个会话。</p><p>而Web应用程序是使用HTTP协议传输数据的。HTTP协议是无状态的协议。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话。即用户A购买了一件商品放入购物车内，当再次购买商品时服务器已经无法判断该购买行为是属于用户A的会话还是用户B的会话了。要跟踪该会话，必须引入一种机制。</p><p>Cookie就是这样的一种机制。它可以弥补HTTP协议无状态的不足。在Session出现之前，基本上所有的网站都采用Cookie来跟踪会话。</p><p>Cookie的工作原理是给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。</p><p><strong>Cookie实际上是一小段的文本信息。</strong>客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。</p><h3 id="Cookie的类型"><a href="#Cookie的类型" class="headerlink" title="Cookie的类型"></a>Cookie的类型</h3><p>Cookie总时由用户客户端进行保存的（一般是浏览器），按其存储位置可分为：内存式Cookie和硬盘式Cookie。</p><p>内存式Cookie存储在内存中，浏览器关闭后就会消失，由于其存储时间较短，因此也被称为非持久Cookie或会话Cookie。</p><p>硬盘式Cookie保存在硬盘中，其不会随浏览器的关闭而消失，除非用户手工清理或到了过期时间。由于硬盘式Cookie存储时间是长期的，因此也被称为持久Cookie。</p><h3 id="Cookie的实现原理"><a href="#Cookie的实现原理" class="headerlink" title="Cookie的实现原理"></a>Cookie的实现原理</h3><p>Cookie定义了一些HTTP请求头和HTTP响应头，通过这些HTTP头信息使服务器可以与客户进行状态交互。</p><p>客户端请求服务器后，如果服务器需要记录用户状态，服务器会在响应信息中包含一个Set-Cookie的响应头，客户端会根据这个响应头存储Cookie信息。再次请求服务器时，客户端会在请求信息中包含一个Cookie请求头，而服务器会根据这个请求头进行用户身份、状态等校验。</p><img src="/2017/08/19/Cookie-Session机制/实现Cookie机制的HTTP请求过程.JPG" title="实现Cookie机制的HTTP请求过程"><h3 id="Cookie的过期时间"><a href="#Cookie的过期时间" class="headerlink" title="Cookie的过期时间"></a>Cookie的过期时间</h3><p>&emsp;&emsp;Cookie的maxAge决定着Cookie的有效期，单位为秒（Second）。Cookie中通过getMaxAge()方法与setMaxAge(int maxAge)方法来读写maxAge属性。<br>如果maxAge属性为正数，则表示该Cookie会在maxAge秒之后自动失效。浏览器会将maxAge为正数的Cookie持久化，即写到对应的Cookie文件中。无论客户关闭了浏览器还是电脑，只要还在maxAge秒之前，登录网站时该Cookie仍然有效。下面代码中的Cookie信息将永远有效。</p><h3 id="Cookie的修改删除"><a href="#Cookie的修改删除" class="headerlink" title="Cookie的修改删除"></a>Cookie的修改删除</h3><p>&emsp;&emsp;Cookie并不提供修改、删除操作。如果要修改某个Cookie，只需要新建一个同名的Cookie，添加到response中覆盖原来的Cookie。<br>如果要删除某个Cookie，只需要新建一个同名的Cookie，并将maxAge设置为0，并添加到response中覆盖原来的Cookie。注意是0而不是负数。负数代表其他的意义。读者可以通过上例的程序进行验证，设置不同的属性。</p><h3 id="Cookie的域名"><a href="#Cookie的域名" class="headerlink" title="Cookie的域名"></a>Cookie的域名</h3><p><strong>Cookie是不可跨域名的。</strong>域名<a href="http://www.google.com颁发的Cookie不会被提交到域名www.baidu.com去。这是由Cookie的隐私安全机制决定的。隐私安全机制能够禁止网站非法获取其他网站的Cookie。" target="_blank" rel="noopener">www.google.com颁发的Cookie不会被提交到域名www.baidu.com去。这是由Cookie的隐私安全机制决定的。隐私安全机制能够禁止网站非法获取其他网站的Cookie。</a><br>正常情况下，同一个一级域名下的两个二级域名如<a href="http://www.helloweenvsfei.com和images.helloweenvsfei.com也不能交互使用Cookie，因为二者的域名并不严格相同。如果想所有helloweenvsfei.com名下的二级域名都可以使用该Cookie，需要设置Cookie的domain参数。" target="_blank" rel="noopener">www.helloweenvsfei.com和images.helloweenvsfei.com也不能交互使用Cookie，因为二者的域名并不严格相同。如果想所有helloweenvsfei.com名下的二级域名都可以使用该Cookie，需要设置Cookie的domain参数。</a><br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> <span class="type">Cookie</span>(<span class="string">"time"</span>,<span class="string">"20080808"</span>); <span class="comment">// 新建Cookie</span></span><br><span class="line">cookie.setDomain(<span class="string">".helloweenvsfei.com"</span>);           <span class="comment">// 设置域名</span></span><br><span class="line">cookie.setPath(<span class="string">"/"</span>);                              <span class="comment">// 设置路径</span></span><br><span class="line">cookie.setMaxAge(Integer.MAX_VALUE);               <span class="comment">// 设置有效期</span></span><br><span class="line">response.addCookie(cookie);                       <span class="comment">// 输出到客户端</span></span><br></pre></td></tr></table></figure></p><p>注意：domain参数必须以点(“.”)开始。另外，name相同但domain不同的两个Cookie是两个不同的Cookie。如果想要两个域名完全不同的网站共有Cookie，可以生成两个Cookie，domain属性分别为两个域名，输出到客户端。</p><h3 id="Cookie的路径"><a href="#Cookie的路径" class="headerlink" title="Cookie的路径"></a>Cookie的路径</h3><p>&emsp;&emsp;domain属性决定运行访问Cookie的域名，而path属性决定允许访问Cookie的路径（ContextPath）。例如，如果只允许/sessionWeb/下的程序使用Cookie，可以这么写：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> <span class="type">Cookie</span>(<span class="string">"time"</span>,<span class="string">"20080808"</span>);     <span class="comment">// 新建Cookie</span></span><br><span class="line">cookie.setPath(<span class="string">"/session/"</span>);                          <span class="comment">// 设置路径</span></span><br><span class="line">response.addCookie(cookie);                           <span class="comment">// 输出到客户端</span></span><br></pre></td></tr></table></figure></p><h3 id="Cookie的安全属性"><a href="#Cookie的安全属性" class="headerlink" title="Cookie的安全属性"></a>Cookie的安全属性</h3><p>&emsp;&emsp;HTTP协议不仅是无状态的，而且是不安全的。使用HTTP协议的数据不经过任何加密就直接在网络上传播，有被截获的可能。使用HTTP协议传输很机密的内容是一种隐患。如果不希望Cookie在HTTP等非安全协议中传输，可以设置Cookie的secure属性为true。浏览器只会在HTTPS和SSL等安全协议中传输此类Cookie。</p><h3 id="Cookie对于中文编码"><a href="#Cookie对于中文编码" class="headerlink" title="Cookie对于中文编码"></a>Cookie对于中文编码</h3><p>&emsp;&emsp;中文与英文字符不同，中文属于Unicode字符，在内存中占4个字符，而英文属于ASCII字符，内存中只占2个字节。Cookie中使用Unicode字符时需要对Unicode字符进行编码，否则会乱码。</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Session是服务器端使用的一种记录客户端状态的机制，使用上比Cookie简单一些，相应的也增加了服务器的存储压力。</p><h3 id="Session的含义"><a href="#Session的含义" class="headerlink" title="Session的含义"></a>Session的含义</h3><p>&emsp;&emsp;Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。<br>如果说Cookie机制是通过检查客户身上的“通行证”来确定客户身份的话，那么Session机制就是通过检查服务器上的“客户明细表”来确认客户身份。Session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。</p><p>Session对应的类为javax.servlet.http.HttpSession类。每个来访者对应一个Session对象，所有该客户的状态信息都保存在这个Session对象里。Session对象是在客户端第一次请求服务器的时候创建的。Session也是一种key-value的属性对，通过getAttribute(Stringkey)和setAttribute(String key，Objectvalue)方法读写客户状态信息。Session机制决定了当前客户只会获取到自己的Session，而不会获取到别人的Session。各客户的Session也彼此独立，互不可见。</p><h3 id="Session生命周期"><a href="#Session生命周期" class="headerlink" title="Session生命周期"></a>Session生命周期</h3><p>&emsp;&emsp;Session保存在服务器端。为了获得更高的存取速度，服务器一般把Session放在内存里。每个用户都会有一个独立的Session。如果Session内容过于复杂，当大量客户访问服务器时可能会导致内存溢出。因此，Session里的信息应该尽量精简。<br>Session在用户第一次访问服务器的时候自动创建。需要注意只有访问JSP、Servlet等程序时才会创建Session，只访问HTML、IMAGE等静态资源并不会创建Session。如果尚未生成Session，也可以使用request.getSession(true)强制生成Session。<br>Session生成后，只要用户继续访问，服务器就会更新Session的最后访问时间，并维护该Session。用户每访问服务器一次，无论是否读写Session，服务器都认为该用户的Session“活跃（active）”了一次。</p><h3 id="Session的有效期"><a href="#Session的有效期" class="headerlink" title="Session的有效期"></a>Session的有效期</h3><p>&emsp;&emsp;由于会有越来越多的用户访问服务器，因此Session也会越来越多。为防止内存溢出，服务器会把长时间内没有活跃的Session从内存删除。这个时间就是Session的超时时间。如果超过了超时时间没访问过服务器，Session就自动失效了。<br>Session的超时时间为maxInactiveInterval属性，可以通过对应的getMaxInactiveInterval()获取，通过setMaxInactiveInterval(longinterval)修改。<br>Session的超时时间也可以在web.xml中修改。另外，通过调用Session的invalidate()方法可以使Session失效。</p><h3 id="Session对浏览器的要求"><a href="#Session对浏览器的要求" class="headerlink" title="Session对浏览器的要求"></a>Session对浏览器的要求</h3><p>&emsp;&emsp;虽然Session保存在服务器，对客户端是透明的，它的正常运行仍然需要客户端浏览器的支持。这是因为Session需要使用Cookie作为识别标志。HTTP协议是无状态的，Session不能依据HTTP连接来判断是否为同一客户，因此服务器向客户端浏览器发送一个名为JSESSIONID的Cookie，它的值为该Session的id（也就是HttpSession.getId()的返回值）。Session依据该Cookie来识别是否为同一用户。<br>该Cookie为服务器自动生成的，它的maxAge属性一般为–1，表示仅当前浏览器内有效，并且各浏览器窗口间不共享，关闭浏览器就会失效。<br>因此同一机器的两个浏览器窗口访问服务器时，会生成两个不同的Session。<br><strong>但是由浏览器窗口内的链接、脚本等打开的新窗口（也就是说不是双击桌面浏览器图标等打开的窗口）除外。这类子窗口会共享父窗口的Cookie，因此会共享一个Session。</strong></p><h3 id="URL地址重写"><a href="#URL地址重写" class="headerlink" title="URL地址重写"></a>URL地址重写</h3><p>&emsp;&emsp;URL地址重写是对客户端不支持Cookie的解决方案。URL地址重写的原理是将该用户Session的id信息重写到URL地址中。服务器能够解析重写后的URL获取Session的id。这样即使客户端不支持Cookie，也可以使用Session来记录用户状态。HttpServletResponse类提供了encodeURL(Stringurl)实现URL地址重写。</p><h3 id="Session中禁止使用Cookie"><a href="#Session中禁止使用Cookie" class="headerlink" title="Session中禁止使用Cookie"></a>Session中禁止使用Cookie</h3><p>&emsp;&emsp;既然WAP上大部分的客户浏览器都不支持Cookie，索性禁止Session使用Cookie，统一使用URL地址重写会更好一些。Java Web规范支持通过配置的方式禁用Cookie。下面举例说一下怎样通过配置禁止使用Cookie。<br>打开项目sessionWeb的WebRoot目录下的META-INF文件夹（跟WEB-INF文件夹同级，如果没有则创建），打开context.xml（如果没有则创建），编辑内容如下：<br>代码1.11 /META-INF/context.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/sessionWeb"</span><span class="attr">cookies</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>或者修改Tomcat全局的conf/context.xml，修改内容如下：<br>代码1.12  context.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- The contents of this file will be loaded for eachweb application --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">cookies</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... 中间代码略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>部署后TOMCAT便不会自动生成名JSESSIONID的Cookie，Session也不会以Cookie为识别标志，而仅仅以重写后的URL地址为识别标志了。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://itbilu.com/other/relate/4J4n8fIPe.html" target="_blank" rel="noopener">Http Cookie机制及Cookie的实现原理</a><br><a href="http://blog.csdn.net/fangaoxin/article/details/6952954" target="_blank" rel="noopener">Cookie/Session机制详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!--TOC--&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;会话（Session）跟踪是Web程序中常用的技术，用来跟踪用户的整个会话。常用的会话跟踪技术是Cookie与Session。Cookie通过在客户端记录信息确定用户身份，Session通过在服务器端记录信息确定用户身份。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="聚沙成塔" scheme="/categories/record/"/>
    
    
      <category term="record" scheme="/tags/record/"/>
    
      <category term="network" scheme="/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>关于mina的知识整理</title>
    <link href="/2017/08/18/%E5%85%B3%E4%BA%8Emina%E7%9A%84%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>/2017/08/18/关于mina的知识整理/</id>
    <published>2017-08-18T09:55:50.000Z</published>
    <updated>2019-07-15T02:16:33.374Z</updated>
    
    <content type="html"><![CDATA[<!--TOC--><p>&emsp;&emsp;Apache MINA(Multipurpose Infrastructure for Network Applications) 是 Apache 组织一个较新的项目，它为开发高性能和高可用性的网络应用程序提供了非常便利的框架。当前发行的 MINA 版本支持基于 Java NIO 技术的 TCP/UDP 应用程序开发、串口通讯程序（只在最新的预览版中提供），MINA 所支持的功能也在进一步的扩展中。<br><a id="more"></a></p><h2 id="MINA基本类的描述"><a href="#MINA基本类的描述" class="headerlink" title="MINA基本类的描述"></a>MINA基本类的描述</h2><ol><li>IoAccepter    相当于网络应用程序中的服务器端</li><li>IoConnector    相当于客户端</li><li>IoSession    当前客户端到服务器端的一个连接实例</li><li>IoHandler    业务处理逻辑</li><li>IoFilter        过滤器用于悬接通讯层接口与业务层接口</li></ol><p>在上图中的模块链中，IoService 便是应用程序的入口，相当于我们前面代码中的 IoAccepter，IoAccepter 便是 IoService 的一个扩展接口。IoService 接口可以用来添加多个 IoFilter，这些 IoFilter 符合责任链模式并由 IoProcessor 线程负责调用。而 IoAccepter 在 ioService 接口的基础上还提供绑定某个通讯端口以及取消绑定的接口。<br>IoAccepter 的：<br><code>IoAcceptor acceptor = new SocketAcceptor();</code><br>相当于我们使用了 Socket 通讯方式作为服务的接入，当前版本的 MINA 还提供了除 SocketAccepter 外的基于数据报文通讯的 DatagramAccepter 以及基于管道通讯的 VmPipeAccepter。而在上图中最右端也就是 IoHandler，这便是业务处理模块。编写 Handler 类就是使用 MINA 开发网络应用程序的重心所在，相当于 MINA 已经帮你处理了所有的通讯方面的细节问题。为了简化 Handler 类，MINA 提供了 IoHandlerAdapter 类，此类仅仅是实现了 IoHandler 接口，但并不做任何处理。</p><p>前面我们提到 IoService 是负责底层通讯接入，而 IoHandler 是负责业务处理的。那么 MINA 架构图中的 IoFilter 作何用途呢？答案是你想作何用途都可以。但是有一个用途却是必须的，那就是作为 IoService 和 IoHandler 之间的桥梁。IoHandler 接口中最重要的一个方法是 messageReceived，这个方法的第二个参数是一个 Object 型的消息，总所周知，Object 是所有 Java 对象的基础，那到底谁来决定这个消息到底是什么类型呢？答案也就在这个 IoFilter 中。在前面使用的例子中，我们添加了一个 IoFilter 是 new ProtocolCodecFilter(new TextLineCodecFactory())，<strong>这个过滤器的作用是将来自客户端输入的信息转换成一行行的文本后传递给 IoHandler</strong>，因此我们可以在 messageReceived 中直接将 msg 对象强制转换成 String 对象。</p><p>而如果我们不提供任何过滤器的话，那么在 messageReceived 方法中的第二个参数类型就是一个 byte 的缓冲区，对应的类是 org.apache.mina.common.ByteBuffer。虽然你也可以将解析客户端信息放在 IoHandler 中来做，但这并不是推荐的做法，使原来清晰的模型又模糊起来，变得 IoHandler 不只是业务处理，还得充当协议解析的任务。</p><h2 id="NIO的模式"><a href="#NIO的模式" class="headerlink" title="NIO的模式"></a>NIO的模式</h2><h3 id="Reactor模型"><a href="#Reactor模型" class="headerlink" title="Reactor模型"></a>Reactor模型</h3><p>&emsp;&emsp;无论是C++还是Java编写的网络框架，大多数都是基于Reactor模式进行设计和开发，Reactor模式基于事件驱动，特别适合处理海量的I/O事件。</p><h3 id="单线程模型"><a href="#单线程模型" class="headerlink" title="单线程模型"></a>单线程模型</h3><p>Reactor单线程模型，指的是所有的IO操作都在同一个NIO线程上面完成，NIO线程的职责如下：</p><p>1）作为NIO服务端，接收客户端的TCP连接；</p><p>2）作为NIO客户端，向服务端发起TCP连接；</p><p>3）读取通信对端的请求或者应答消息；</p><p>4）向通信对端发送消息请求或者应答消息。</p><img src="/2017/08/18/关于mina的知识整理/Reactor单线程模型.JPG" title="Reactor单线程模型"><p>&emsp;&emsp;由于Reactor模式使用的是异步非阻塞IO，所有的IO操作都不会导致阻塞，理论上一个线程可以独立处理所有IO相关的操作。从架构层面看，一个NIO线程确实可以完成其承担的职责。例如，通过Acceptor类接收客户端的TCP连接请求消息，链路建立成功之后，通过Dispatch将对应的ByteBuffer派发到指定的Handler上进行消息解码。用户线程可以通过消息编码通过NIO线程将消息发送给客户端。</p><p>对于一些小容量应用场景，可以使用单线程模型。但是对于高负载、大并发的应用场景却不合适，主要原因如下：</p><p>1）一个NIO线程同时处理成百上千的链路，性能上无法支撑，即便NIO线程的CPU负荷达到100%，也无法满足海量消息的编码、解码、读取和发送；</p><p>2）当NIO线程负载过重之后，处理速度将变慢，这会导致大量客户端连接超时，超时之后往往会进行重发，这更加重了NIO线程的负载，最终会导致大量消息积压和处理超时，成为系统的性能瓶颈；</p><p>3）可靠性问题：一旦NIO线程意外跑飞，或者进入死循环，会导致整个系统通信模块不可用，不能接收和处理外部消息，造成节点故障。</p><h3 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a>多线程模型</h3><p>&emsp;&emsp;Rector多线程模型与单线程模型最大的区别就是有一组NIO线程处理IO操作，它的原理图如下：</p><img src="/2017/08/18/关于mina的知识整理/Reactor多线程模型.JPG" title="Reactor多线程模型"><p>1）有专门一个NIO线程-Acceptor线程用于监听服务端，接收客户端的TCP连接请求；</p><p>2）网络IO操作-读、写等由一个NIO线程池负责，线程池可以采用标准的JDK线程池实现，它包含一个任务队列和N个可用的线程，由这些NIO线程负责消息的读取、解码、编码和发送；</p><p>3）1个NIO线程可以同时处理N条链路，但是1个链路只对应1个NIO线程，防止发生并发操作问题</p><hr><p>在绝大多数场景下，Reactor多线程模型都可以满足性能需求；但是，在极个别特殊场景中，一个NIO线程负责监听和处理所有的客户端连接可能会存在性能问题。例如并发百万客户端连接，或者服务端需要对客户端握手进行安全认证，但是认证本身非常损耗性能。在这类场景下，单独一个Acceptor线程可能会存在性能不足问题，为了解决性能问题，产生了第三种Reactor线程模型-主从Reactor多线程模型。</p><h3 id="主从多线程模型"><a href="#主从多线程模型" class="headerlink" title="主从多线程模型"></a>主从多线程模型</h3><p>&emsp;&emsp;主从Reactor线程模型的特点是：服务端用于接收客户端连接的不再是个1个单独的NIO线程，而是一个独立的NIO线程池。Acceptor接收到客户端TCP连接请求处理完成后（可能包含接入认证等），将新创建的SocketChannel注册到IO线程池（sub reactor线程池）的某个IO线程上，由它负责SocketChannel的读写和编解码工作。Acceptor线程池仅仅只用于客户端的登陆、握手和安全认证，一旦链路建立成功，就将链路注册到后端subReactor线程池的IO线程上，由IO线程负责后续的IO操作。</p><img src="/2017/08/18/关于mina的知识整理/Reactor主从多线程模型.JPG" title="Reactor主从多线程模型"><p>利用主从NIO线程模型，可以解决1个服务端监听线程无法有效处理所有客户端连接的性能不足问题。</p><p>它的工作流程总结如下：</p><p>从主线程池中随机选择一个Reactor线程作为Acceptor线程，用于绑定监听端口，接收客户端连接；<br>Acceptor线程接收客户端连接请求之后创建新的SocketChannel，将其注册到主线程池的其它Reactor线程上，由其负责接入认证、IP黑白名单过滤、握手等操作；<br>步骤2完成之后，业务层的链路正式建立，将SocketChannel从主线程池的Reactor线程的多路复用器上摘除，重新注册到Sub线程池的线程上，用于处理I/O的读写操作。</p><h2 id="MINA中常用的接口"><a href="#MINA中常用的接口" class="headerlink" title="MINA中常用的接口"></a>MINA中常用的接口</h2><h3 id="IoService"><a href="#IoService" class="headerlink" title="IoService"></a>IoService</h3><p>这个接口是服务端IoAcceptor、客户端IoConnector 的抽象，提供IO 服务和管理IoSession的功能，它有如下几个常用的方法：<br>A. TransportMetadata getTransportMetadata()：<br>这个方法获取传输方式的元数据描述信息，也就是底层到底基于什么的实现，譬如：nio、apr 等。<br>B. void addListener(IoServiceListener listener)：<br>这个方法可以为IoService 增加一个监听器，用于监听IoService 的创建、活动、失效、空闲、销毁，具体可以参考IoServiceListener 接口中的方法，这为你参与IoService 的生命周期提供了机会。<br>C. void removeListener(IoServiceListener listener)：<br>这个方法用于移除上面的方法添加的监听器。<br>D. void setHandler(IoHandler handler)：<br>这个方法用于向IoService 注册IoHandler，同时有getHandler()方法获取Handler。<br>E. Map&lt;Long,IoSession&gt; getManagedSessions()：<br>这个方法获取IoService 上管理的所有IoSession，Map 的key 是IoSession 的id。<br>F. IoSessionConfig getSessionConfig()：<br>这个方法用于获取IoSession 的配置对象，通过IoSessionConfig 对象可以设置Socket 连接的一些选项。</p><hr><h3 id="IoAcceptor"><a href="#IoAcceptor" class="headerlink" title="IoAcceptor"></a>IoAcceptor</h3><p>这个接口是TCPServer 的接口，主要增加了void bind()监听端口、void unbind()解除对套接字的监听等方法。这里与传统的JAVA 中的ServerSocket 不同的是IoAcceptor 可以多次调用bind()方法（或者在一个方法中传入多个SocketAddress 参数）同时监听多个端口。</p><hr><h3 id="IoConnector"><a href="#IoConnector" class="headerlink" title="IoConnector"></a>IoConnector</h3><p>这个接口是TCPClient 的接口， 主要增加了ConnectFuture connect(SocketAddressremoteAddress,SocketAddress localAddress)方法，用于与Server 端建立连接，第二个参数如果不传递则使用本地的一个随机端口访问Server 端。这个方法是异步执行的，同样的，也可以同时连接多个服务端。</p><hr><h3 id="IoSession"><a href="#IoSession" class="headerlink" title="IoSession"></a>IoSession</h3><p>这个接口用于表示Server 端与Client 端的连接，IoAcceptor.accept()的时候返回实例。<br>这个接口有如下常用的方法：<br>A. WriteFuture write(Object message)：<br>这个方法用于写数据，该操作是异步的。<br>B. CloseFuture close(boolean immediately)：<br>这个方法用于关闭IoSession，该操作也是异步的，参数指定true 表示立即关闭，否则就在所有的写操作都flush 之后再关闭。<br>C. Object setAttribute(Object key,Object value)：<br>这个方法用于给我们向会话中添加一些属性，这样可以在会话过程中都可以使用，类似于HttpSession 的setAttrbute()方法。IoSession 内部使用同步的HashMap 存储你添加的自<br>定义属性。<br>D. SocketAddress getRemoteAddress()：<br>这个方法获取远端连接的套接字地址。<br>E. void suspendWrite()：<br>这个方法用于挂起写操作，那么有void resumeWrite()方法与之配对。对于read()方法同样适用。<br>F. ReadFuture read()：<br>这个方法用于读取数据， 但默认是不能使用的， 你需要调用IoSessionConfig 的setUseReadOperation(true)才可以使用这个异步读取的方法。一般我们不会用到这个方法，因为这个方法的内部实现是将数据保存到一个BlockingQueue，假如是Server 端，因为大量的Client 端发送的数据在Server 端都这么读取，那么可能会导致内存泄漏，但对于Client，可能有的时候会比较便利。<br>G. IoService getService()：<br>这个方法返回与当前会话对象关联的IoService 实例。<br>关于TCP连接的关闭：<br>无论在客户端还是服务端，IoSession 都用于表示底层的一个TCP 连接，那么你会发现无论是Server 端还是Client 端的IoSession 调用close()方法之后，TCP 连接虽然显示关闭， 但主线程仍然在运行，也就是JVM 并未退出，这是因为IoSession 的close()仅仅是关闭了TCP的连接通道，并没有关闭Server 端、Client 端的程序。你需要调用IoService 的dispose()方法停止Server 端、Client 端。</p><hr><h3 id="IoSessionConfig"><a href="#IoSessionConfig" class="headerlink" title="IoSessionConfig"></a>IoSessionConfig</h3><p>这个方法用于指定此次会话的配置，它有如下常用的方法：<br>A. void setReadBufferSize(int size)：</p><p>这个方法设置读取缓冲的字节数，但一般不需要调用这个方法，因为IoProcessor 会自动调整缓冲的大小。你可以调用setMinReadBufferSize()、setMaxReadBufferSize()方法，这样无论IoProcessor 无论如何自动调整，都会在你指定的区间。<br>B. void setIdleTime(IdleStatus status,int idleTime)：<br>这个方法设置关联在通道上的读、写或者是读写事件在指定时间内未发生，该通道就进入空闲状态。一旦调用这个方法，则每隔idleTime 都会回调过滤器、IoHandler 中的sessionIdle()方法。<br>C. void setWriteTimeout(int time)：<br>这个方法设置写操作的超时时间。<br>D. void setUseReadOperation(boolean useReadOperation)：<br>这个方法设置IoSession 的read()方法是否可用，默认是false。</p><hr><h3 id="IoHandler"><a href="#IoHandler" class="headerlink" title="IoHandler"></a>IoHandler</h3><p>这个接口是你编写业务逻辑的地方，从上面的示例代码可以看出，读取数据、发送数据基本都在这个接口总完成，这个实例是绑定到IoService 上的，有且只有一个实例（没有给一个IoService 注入一个IoHandler 实例会抛出异常）。它有如下几个方法：<br>A. void sessionCreated(IoSession session)：<br>这个方法当一个Session 对象被创建的时候被调用。对于TCP 连接来说，连接被接受的时候调用，但要注意此时TCP 连接并未建立，此方法仅代表字面含义，也就是连接的对象IoSession 被创建完毕的时候，回调这个方法。对于UDP 来说，当有数据包收到的时候回调这个方法，因为UDP 是无连接的。<br>B. void sessionOpened(IoSession session)：<br>这个方法在连接被打开时调用，它总是在sessionCreated()方法之后被调用。对于TCP 来说，它是在连接被建立之后调用，你可以在这里执行一些认证操作、发送数据等。对于UDP 来说，这个方法与sessionCreated()没什么区别，但是紧跟其后执行。如果你每隔一段时间，发送一些数据，那么sessionCreated()方法只会在第一次调用，但是sessionOpened()方法每次都会调用。<br>C. void sessionClosed(IoSession session) ：<br>对于TCP 来说，连接被关闭时，调用这个方法。对于UDP 来说，IoSession 的close()方法被调用时才会毁掉这个方法。<br>D. void sessionIdle(IoSession session, IdleStatus status) ：<br>这个方法在IoSession 的通道进入空闲状态时调用，对于UDP 协议来说，这个方法始终不会被调用。<br>E. void exceptionCaught(IoSession session, Throwable cause) ：<br>这个方法在你的程序、Mina 自身出现异常时回调，一般这里是关闭IoSession。</p><p>F. void messageReceived(IoSession session, Object message) ：<br>接收到消息时调用的方法，也就是用于接收消息的方法，一般情况下，message 是一个IoBuffer 类，如果你使用了协议编解码器，那么可以强制转换为你需要的类型。通常我们都是会使用协议编解码器的， 就像上面的例子， 因为协议编解码器是<br>TextLineCodecFactory，所以我们可以强制转message 为String 类型。<br>G. void messageSent(IoSession session, Object message) ：<br>当发送消息成功时调用这个方法，注意这里的措辞，发送成功之后，也就是说发送消息是不能用这个方法的。<br>发送消息的时机：<br>发送消息应该在sessionOpened()、messageReceived()方法中调用IoSession.write()方法完成。因为在sessionOpened()方法中，TCP 连接已经真正打开，同样的在messageReceived()方法TCP 连接也是打开状态，只不过两者的时机不同。sessionOpened()方法是在TCP 连接建立之后，接收到数据之前发送；messageReceived()方法是在接收到数据之后发送，你可以完成依据收到的内容是什么样子，决定发送什么样的数据。因为这个接口中的方法太多，因此通常使用适配器模式IoHandlerAdapter，覆盖你所感兴趣的方法即可。</p><hr><h3 id="IoFuture"><a href="#IoFuture" class="headerlink" title="IoFuture"></a>IoFuture</h3><p>在Mina 的很多操作中，你会看到返回值是XXXFuture，实际上他们都是IoFuture 的子类，看到这样的返回值，这个方法就说明是异步执行的，主要的子类有ConnectFuture、CloseFuture 、ReadFuture 、WriteFuture 。这个接口的大部分操作都和<br>java.util.concurrent.Future 接口是类似的，譬如：await()、awaitUninterruptibly()等，一般我们常用awaitUninterruptibly()方法可以等待异步执行的结果返回。这个接口有如下常用的方法：<br>A. IoFuture addListener(IoFutureListener&lt;?&gt; listener)：<br>这个方法用于添加一个监听器， 在异步执行的结果返回时监听器中的回调方法operationComplete(IoFuture future)，也就是说，这是替代awaitUninterruptibly()方法另一种等待异步执行结果的方法，它的好处是不会产生阻塞。<br>B. IoFuture removeListener(IoFutureListener&lt;?&gt; listener)：<br>这个方法用于移除指定的监听器。<br>C. IoSession getSession()：<br>这个方法返回当前的IoSession。举个例子，我们在客户端调用connect()方法访问Server 端的时候，实际上这就是一个异步执行的方法，也就是调用connect()方法之后立即返回，执行下面的代码，而不管是否连接成功。</p><h2 id="Mina中自带的解码器"><a href="#Mina中自带的解码器" class="headerlink" title="Mina中自带的解码器"></a>Mina中自带的解码器</h2><p>Mina中自带的解码器：</p><ul><li>CumulativeProtocolDecoder<br>累积性解码器</li><li>SynchronizedProtocolDecoder 这个解码器用于将任何一个解码器包装为一个线程安全的解码器，用于解决上面说的每次执行decode()方法时可能线程不是上一次的线程的问题，但这样会在高并发时，大大降低系统的性能。</li><li>TextLineDecoder<br>按照文本的换行符（ Windows:/r/n 、Linux:/n、Mac:/r）解码数据。</li><li>PrefixedStringDecoder 这个类继承自CumulativeProtocolDecoder类，用于读取数据最前端的1、2、4 个字节表示后面的数据长度的数据。譬如：一个段数据的前两个字节表示后面的真实数据的长度，那么你就可以用这个方法进行解码。</li></ul><h2 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h2><p>解码器的编写有以下几个步骤：<br>A. 将 encode()方法中的message 对象强制转换为指定的对象类型；<br>B. 创建IoBuffer 缓冲区对象，并设置为自动扩展；<br>C. 将转换后的message 对象中的各个部分按照指定的应用层协议进行组装，并put()到IoBuffer 缓冲区；<br>D. 当你组装数据完毕之后，调用flip()方法，为输出做好准备，切记在write()方法之前，要调用IoBuffer 的flip()方法，否则缓冲区的position 的后面是没有数据可以用来输出的，你必须调用flip()方法将position 移至0，limit 移至刚才的position。这个flip()方法的含义请参看java.nio.ByteBuffer。<br>E. 最后调用ProtocolEncoderOutput 的write()方法输出IoBuffer 缓冲区实例。</p><h2 id="解码器"><a href="#解码器" class="headerlink" title="解码器"></a>解码器</h2><p>在Mina 中编写解码器，可以实现ProtocolDecoder 接口，其中有decode()、finishDecode()、dispose()三个方法。这里的finishDecode()方法可以用于处理在IoSession 关闭时剩余的未读取数据，一般这个方法并不会被使用到，除非协议中未定义任何标识数据什么时候截止的约定，譬如：Http 响应的Content-Length 未设定，那么在你认为读取完数据后，关闭TCP连接（IoSession 的关闭）后，就可以调用这个方法处理剩余的数据，当然你也可以忽略调剩余的数据。同样的，一般情况下，我们只需要继承适配器ProtocolDecoderAdapter，关注decode()方法即可。但前面说过解码器相对编码器来说，最麻烦的是数据发送过来的规模，以聊天室为例，一个TCP 连接建立之后，那么隔一段时间就会有聊天内容发送过来，也就是decode()方法会被往复调用，这样处理起来就会非常麻烦。那么Mina 中幸好提供了CumulativeProtocolDecoder类，从名字上可以看出累积性的协议解码器，也就是说只要有数据发送过来，这个类就会去读取数据，然后累积到内部的IoBuffer 缓冲区，但是具体的拆包（把累积到缓冲区的数据解码为JAVA 对象）交由子类的doDecode()方法完成，实际上CumulativeProtocolDecoder就是在decode()反复的调用暴漏给子类实现的doDecode()方法。</p><h3 id="解码的具体执行过程"><a href="#解码的具体执行过程" class="headerlink" title="解码的具体执行过程"></a>解码的具体执行过程</h3><p>A. 你的doDecode()方法返回true 时，CumulativeProtocolDecoder 的decode()方法会首先判断你是否在doDecode()方法中从内部的IoBuffer 缓冲区读取了数据，如果没有，则会抛出非法的状态异常，也就是你的doDecode()方法返回true 就表示你已经消费了本次数据（相当于聊天室中一个完整的消息已经读取完毕），进一步说，也就是此时你必须已经消费过内部的IoBuffer 缓冲区的数据（哪怕是消费了一个字节的数据）。如果验证过通过，那么CumulativeProtocolDecoder 会检查缓冲区内是否还有数据未读取，如果有就继续调用doDecode()方法，没有就停止对doDecode()方法的调用，直到有新的数据被缓冲。</p><p>B. 当你的doDecode()方法返回false 时，CumulativeProtocolDecoder 会停止对doDecode()方法的调用，但此时如果本次数据还有未读取完的，就将含有剩余数据的IoBuffer 缓冲区保存到IoSession 中，以便下一次数据到来时可以从IoSession 中提取合并。如果发现本次数据全都读取完毕，则清空IoBuffer 缓冲区。</p><p><strong>简而言之，当你认为读取到的数据已经够解码了，那么就返回true，否则就返回false。这个CumulativeProtocolDecoder 其实最重要的工作就是帮你完成了数据的累积，因为这个工作是很烦琐的。</strong></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-apmina/" target="_blank" rel="noopener">使用 Apache MINA 开发高性能网络应用程序</a></li><li><a href="http://www.gad.qq.com/article/detail/12247" target="_blank" rel="noopener">mina框架详解</a></li><li><a href="http://www.infoq.com/cn/articles/netty-threading-model" target="_blank" rel="noopener">Netty系列之Netty线程模型</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;!--TOC--&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;Apache MINA(Multipurpose Infrastructure for Network Applications) 是 Apache 组织一个较新的项目，它为开发高性能和高可用性的网络应用程序提供了非常便利的框架。当前发行的 MINA 版本支持基于 Java NIO 技术的 TCP/UDP 应用程序开发、串口通讯程序（只在最新的预览版中提供），MINA 所支持的功能也在进一步的扩展中。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="聚沙成塔" scheme="/categories/record/"/>
    
    
      <category term="record" scheme="/tags/record/"/>
    
      <category term="network" scheme="/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>HttpEntity出现的java.io.IOException:Stream Closed</title>
    <link href="/2017/08/18/HttpEntity%E5%87%BA%E7%8E%B0%E7%9A%84java-io-IOException-Stream-Closed/"/>
    <id>/2017/08/18/HttpEntity出现的java-io-IOException-Stream-Closed/</id>
    <published>2017-08-18T02:24:18.000Z</published>
    <updated>2019-07-15T02:16:33.362Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近在开发调试过程中出现了一个java.io.IOException:Stream Closed的错误，而这个错误隐藏的比较好，因为它不涉及到主要的流程，只是在通知邮件的时候出现了这么一个异常，所以直到测试人员介入的时候才发现了这一个隐藏的IOException。<br><a id="more"></a></p><img src="/2017/08/18/HttpEntity出现的java-io-IOException-Stream-Closed/stream_closed.JPG" title="stream_closed"><p>下面就来看看这个异常是怎么产生的：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (int i = 0; i &lt; batch; i++) &#123;</span><br><span class="line">               <span class="keyword">List</span>&lt;HashMap&lt;String, String&gt;&gt; sub = performances.subList(100 * i, Math.<span class="built_in">min</span>(100 * (i + 1), performances.size()));</span><br><span class="line">               HashMap&lt;String, Object&gt; json = new HashMap&lt;&gt;();</span><br><span class="line">               json.put(<span class="string">"userId"</span>, user);</span><br><span class="line">               json.put(<span class="string">"sign"</span>, sign);</span><br><span class="line">               json.put(<span class="string">"type"</span>, <span class="string">"year"</span>);</span><br><span class="line">               json.put(<span class="string">"list"</span>, sub);</span><br><span class="line">               CloseableHttpResponse response = null;</span><br><span class="line">               try &#123;</span><br><span class="line">                   response = HttpClientUtil.postJson(url, JSON.toJSONString(json), 30 * 1000, 30 * 1000, 30 * 1000);</span><br><span class="line">                   <span class="keyword">if</span> (response != null &amp;&amp; response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) &#123;                   </span><br><span class="line">                       JSONObject jsonObject = JSON.parseObject(EntityUtils.<span class="keyword">toString</span>(response.getEntity(), Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line">                       String code = jsonObject.getString(<span class="string">"code"</span>);</span><br><span class="line">                       <span class="keyword">List</span>&lt;Integer&gt; subIds = ids.subList(100 * i, Math.<span class="built_in">min</span>(100 * (i + 1), performances.size()));</span><br><span class="line">                       <span class="keyword">if</span> (!<span class="string">"200"</span>.equals(code)) &#123;</span><br><span class="line">                           sendFailMail(subIds, <span class="string">""</span>,返回code非200<span class="string">",response != null ? EntityUtils.toString(response.getEntity(), Charset.forName("</span>UTF-8<span class="string">")) : "</span>空");</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="keyword">List</span>&lt;Integer&gt; subIds = ids.subList(100 * i, Math.<span class="built_in">min</span>(100 * (i + 1), performances.size()));</span><br><span class="line">                       sendFailMail(subIds, <span class="string">""</span>,response != null ? EntityUtils.<span class="keyword">toString</span>(response.getEntity(), Charset.forName(<span class="string">"UTF-8"</span>)) : <span class="string">"空"</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; catch (Exception <span class="keyword">e</span>) &#123;</span><br><span class="line">                   <span class="keyword">log</span>.<span class="keyword">error</span>(<span class="string">""</span>, <span class="keyword">e</span>);</span><br><span class="line">                   <span class="keyword">List</span>&lt;Integer&gt; subIds = ids.subList(100 * i, Math.<span class="built_in">min</span>(100 * (i + 1), performances.size()));</span><br><span class="line">                   sendFailMail(subIds, <span class="string">""</span>, response != null ? EntityUtils.<span class="keyword">toString</span>(response.getEntity(), Charset.forName(<span class="string">"UTF-8"</span>)) : <span class="string">"空"</span>);</span><br><span class="line">                   throw <span class="keyword">e</span>;</span><br><span class="line">               &#125; finally &#123;</span><br><span class="line">                   <span class="keyword">if</span> (response != null) &#123;</span><br><span class="line">                       response.<span class="keyword">close</span>();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当通过打断点进行定位的时候发现这个异常出现在这个循环体中，再进一步定位发现问题出现在：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="string">"200"</span>.<span class="keyword">equals</span>(code)) </span><br><span class="line">&#123;</span><br><span class="line">sendFailMail(subIds, <span class="string">""</span>,返回code非<span class="number">200</span><span class="string">",response != null ? EntityUtils.toString(response.getEntity(), Charset.forName("</span>UTF<span class="number">-8</span><span class="string">")) : "</span>空<span class="string">");</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><p>于是进入到EntityUtils.toString(response.getEntity(), Charset.forName(“UTF-8”))这个方法中去看EntityUtils方法的实现,这是httpcore-4.4.4.jar的下org.apache.http.util.EntityUtils.class方法<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> toString(HttpEntity entity, Charset defaultCharset) <span class="keyword">throws</span> IOException, ParseException &#123;</span><br><span class="line">        Args.notNull(entity, <span class="string">"Entity"</span>);</span><br><span class="line">        InputStream instream = entity.getContent();</span><br><span class="line">        <span class="keyword">if</span>(instream == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Args.check(entity.getContentLength() &lt;= <span class="number">2147483647</span>L, <span class="string">"HTTP entity too large to be buffered in memory"</span>);</span><br><span class="line">                <span class="built_in">int</span> i = (<span class="built_in">int</span>)entity.getContentLength();</span><br><span class="line">                <span class="keyword">if</span>(i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    i = <span class="number">4096</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Charset charset = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ContentType contentType = ContentType.<span class="built_in">get</span>(entity);</span><br><span class="line">                    <span class="keyword">if</span>(contentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        charset = contentType.getCharset();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (UnsupportedCharsetException var13) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(defaultCharset == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedEncodingException(var13.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(charset == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    charset = defaultCharset;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(charset == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    charset = HTTP.DEF_CONTENT_CHARSET;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Reader reader = <span class="keyword">new</span> InputStreamReader(instream, charset);</span><br><span class="line">                CharArrayBuffer buffer = <span class="keyword">new</span> CharArrayBuffer(i);</span><br><span class="line">                <span class="built_in">char</span>[] tmp = <span class="keyword">new</span> <span class="built_in">char</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">                <span class="built_in">int</span> l;</span><br><span class="line">                <span class="keyword">while</span>((l = reader.read(tmp)) != <span class="number">-1</span>) &#123;</span><br><span class="line">                    buffer.<span class="built_in">append</span>(tmp, <span class="number">0</span>, l);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">String</span> var9 = buffer.toString();</span><br><span class="line">                <span class="keyword">return</span> var9;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                instream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>可以看出确实是在这个方法中会抛出IOException，而且问题应该就出现在finally方法块的instream.close()上，既然改不了httpcore-4.4.4.jar下的文件，那么肯定是原先的代码中调用的方式不对。</p><p>回到源代码中发现这个方法在<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">JSONObject </span><span class="keyword">jsonObject </span>= <span class="keyword">JSON.parseObject(EntityUtils.toString(response.getEntity(), </span>Charset.forName(<span class="string">"UTF-8"</span>)))<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>调用过一次，而在<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="string">"200"</span>.<span class="keyword">equals</span>(code)) </span><br><span class="line">&#123;</span><br><span class="line">sendFailMail(subIds, <span class="string">""</span>,返回code非<span class="number">200</span><span class="string">",response != null ? EntityUtils.toString(response.getEntity(), Charset.forName("</span>UTF<span class="number">-8</span><span class="string">")) : "</span>空<span class="string">");</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><p>又调用了一次。</p><p>接着去网上搜索了一下HttpEntity的这个方法</p><p><a href="https://hc.apache.org/httpcomponents-core-ga/httpcore/apidocs/org/apache/http/HttpEntity.html" target="_blank" rel="noopener">HttpEntity Apache HttpCore 4.4.6 API</a></p><img src="/2017/08/18/HttpEntity出现的java-io-IOException-Stream-Closed/HttpEntity的getContent.JPG" title="HttpEntity的getContent"><p>在getContent()方法下有这么一句话<br><strong><br>Returns a content stream of the entity. Repeatable entities are expected to create a new instance of InputStream for each invocation of this method and therefore can be consumed multiple times. Entities that are not repeatable are expected to return the same InputStream instance and therefore may not be consumed more than once.</strong></p><p>翻译过来的含义是getContent()方法会返回内容流的一个实体。一个entity可以重复也就意味着通过调用这个方法创建一个新的读入流实例，它的content可以被多次读取，但如果一个entity不可重复，那么它通过调用这个方法只会返回同一个读入流实例，也不能被读取多次。</p><p>在这里response.getEntity()方法获得的entity是不可重复的，因此在调用了两次EntityUtils.toString()方法后会出现StreamClosed的错误。</p><p>改写后的代码如下,即可避免java.io.IOException:Stream Closed这个异常：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (int i = 0; i &lt; batch; i++) &#123;</span><br><span class="line">               <span class="keyword">List</span>&lt;HashMap&lt;String, String&gt;&gt; sub = performances.subList(100 * i, Math.<span class="built_in">min</span>(100 * (i + 1), performances.size()));</span><br><span class="line">               HashMap&lt;String, Object&gt; json = new HashMap&lt;&gt;();</span><br><span class="line">               json.put(<span class="string">"userId"</span>, user);</span><br><span class="line">               json.put(<span class="string">"sign"</span>, sign);</span><br><span class="line">               json.put(<span class="string">"type"</span>, <span class="string">"year"</span>);</span><br><span class="line">               json.put(<span class="string">"list"</span>, sub);</span><br><span class="line">               CloseableHttpResponse response = null;</span><br><span class="line">               try &#123;</span><br><span class="line">                   response = HttpClientUtil.postJson(url, JSON.toJSONString(json), 30 * 1000, 30 * 1000, 30 * 1000);</span><br><span class="line">                   <span class="keyword">if</span> (response != null &amp;&amp; response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) &#123; </span><br><span class="line">String temp = EntityUtils.<span class="keyword">toString</span>(response.getEntity(), Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line">JSONObject jsonObject = JSON.parseObject(temp);</span><br><span class="line">                       String code = jsonObject.getString(<span class="string">"code"</span>);</span><br><span class="line">                       <span class="keyword">List</span>&lt;Integer&gt; subIds = ids.subList(100 * i, Math.<span class="built_in">min</span>(100 * (i + 1), performances.size()));</span><br><span class="line">                       <span class="keyword">if</span> (!<span class="string">"200"</span>.equals(code)) &#123;</span><br><span class="line">                           sendFailMail(subIds, <span class="string">""</span>,返回code非200<span class="string">",response != null ? temp : "</span>空");</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="keyword">List</span>&lt;Integer&gt; subIds = ids.subList(100 * i, Math.<span class="built_in">min</span>(100 * (i + 1), performances.size()));</span><br><span class="line">                       sendFailMail(subIds, <span class="string">""</span>,response != null ? EntityUtils.<span class="keyword">toString</span>(response.getEntity(), Charset.forName(<span class="string">"UTF-8"</span>)) : <span class="string">"空"</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; catch (Exception <span class="keyword">e</span>) &#123;</span><br><span class="line">                   <span class="keyword">log</span>.<span class="keyword">error</span>(<span class="string">""</span>, <span class="keyword">e</span>);</span><br><span class="line">                   <span class="keyword">List</span>&lt;Integer&gt; subIds = ids.subList(100 * i, Math.<span class="built_in">min</span>(100 * (i + 1), performances.size()));</span><br><span class="line">                   sendFailMail(subIds, <span class="string">""</span>, response != null ? EntityUtils.<span class="keyword">toString</span>(response.getEntity(), Charset.forName(<span class="string">"UTF-8"</span>)) : <span class="string">"空"</span>);</span><br><span class="line">                   throw <span class="keyword">e</span>;</span><br><span class="line">               &#125; finally &#123;</span><br><span class="line">                   <span class="keyword">if</span> (response != null) &#123;</span><br><span class="line">                       response.<span class="keyword">close</span>();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;最近在开发调试过程中出现了一个java.io.IOException:Stream Closed的错误，而这个错误隐藏的比较好，因为它不涉及到主要的流程，只是在通知邮件的时候出现了这么一个异常，所以直到测试人员介入的时候才发现了这一个隐藏的IOException。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="日常点滴" scheme="/categories/%E6%97%A5%E5%B8%B8%E7%82%B9%E6%BB%B4/"/>
    
    
      <category term="fix bug" scheme="/tags/fix-bug/"/>
    
  </entry>
  
  <entry>
    <title>数据库连接池</title>
    <link href="/2017/08/16/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>/2017/08/16/数据库连接池/</id>
    <published>2017-08-16T02:46:45.000Z</published>
    <updated>2019-07-15T02:16:33.362Z</updated>
    
    <content type="html"><![CDATA[<p>使用连接池可帮助您降低连接管理开销并减少数据访问的开发任务。<br>每当应用程序尝试访问后端存储器（例如数据库）时，它需要资源以创建、维护和释放与该数据库的连接。为了减轻此过程对整体应用程序资源的影响，应用程序服务器允许管理员在应用程序服务器上建立可以由应用程序共享的后端连接池。连接池在数个用户请求之间分布连接开销，从而节省了应用程序资源以供将来的请求使用。<br>应用程序服务器支持用于连接池和连接重用的 JDBC 4.0 API。使用连接池指导应用程序中 JDBC 调用，指导企业 bean 使用数据库。</p><h2 id="使用连接池的好处"><a href="#使用连接池的好处" class="headerlink" title="使用连接池的好处"></a>使用连接池的好处</h2><p>&emsp;&emsp;连接池可改进任何需要连接的应用程序（特别是基于 Web 的应用程序）的响应时间。当用户通过 Web 对资源发出请求时，该资源将访问数据源。由于用户频繁地与因特网上的应用程序建立连接和断开连接，所以应用程序的数据访问请求量可能会相当大。因此，对于基于 Web 的应用程序数据存储器总开销会迅速增大，性能随之下降。但是，使用连接池功能时，Web 应用程序的性能相对于正常结果可以提高达 20 倍。<br>&emsp;&emsp;借助连接池，大多数用户请求不会引起创建新连接的开销，因为数据源能找出并使用连接池中的现有连接。当请求得到满足，并将响应返回到用户时，该资源会将连接返回到连接池以供再次使用。这就避免了断开连接造成的开销。每个用户请求都有一些连接或断开连接的开销。使用初始资源在池中产生连接后，由于能重用现有连接，因此其他开销并不大。</p><h2 id="何时使用连接池"><a href="#何时使用连接池" class="headerlink" title="何时使用连接池"></a>何时使用连接池</h2><p>在符合任何以下条件的应用程序中使用连接池：<br>1、它不能忍受每次使用连接时获取连接和释放连接的开销。<br>2、它需要应用程序服务器中的 Java 事务 API (JTA) 事务。<br>3、它需要在相同事务中的多个用户之间共享连接。<br>4、它需要利用产品功能部件来管理应用程序服务器中的局部事务。<br>5、它不管理其自己连接的池。<br>6、它不管理创建连接的细节（如数据库名称、用户名或密码）</p><h2 id="数据库连接池的优点"><a href="#数据库连接池的优点" class="headerlink" title="数据库连接池的优点"></a>数据库连接池的优点</h2><p>1、资源重用<br>2、更快的系统响应速度<br>3、新的资源分配手段<br>4、统一的连接管理，避免数据库连接泄漏</p><h2 id="常用的开源连接池"><a href="#常用的开源连接池" class="headerlink" title="常用的开源连接池"></a>常用的开源连接池</h2><h3 id="DBCP数据源"><a href="#DBCP数据源" class="headerlink" title="DBCP数据源"></a>DBCP数据源</h3><p>DBCP 是 Apache 软件基金组织下的开源连接池实现，使用DBCP，需要如下两个 jar 文件（commons-dbcp-1.4.jar和commons-pool-1.5.6.jar）：<br>Tomcat 的连接池也是采用该连接池来实现的。<br>该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用。</p><h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h3><p>C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。目前使用它的开源项目有Hibernate，Spring等。C3P0数据源在项目开发中使用得比较多。</p><p><strong>c3p0与dbcp区别</strong><br>1、dbcp没有自动回收空闲连接的功能<br>2、c3p0有自动回收空闲连接功能<br>需要导入jar：c3p0-0.9.5.1.jar和mchange-commons-java-0.2.10.jar<br>在类目录下加入C3P0的配置文件：c3p0-config.xml</p><h3 id="jdbcUtils"><a href="#jdbcUtils" class="headerlink" title="jdbcUtils"></a>jdbcUtils</h3><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用连接池可帮助您降低连接管理开销并减少数据访问的开发任务。&lt;br&gt;每当应用程序尝试访问后端存储器（例如数据库）时，它需要资源以创建、维护和释放与该数据库的连接。为了减轻此过程对整体应用程序资源的影响，应用程序服务器允许管理员在应用程序服务器上建立可以由应用程序共享的后端连
      
    
    </summary>
    
      <category term="聚沙成塔" scheme="/categories/record/"/>
    
    
      <category term="record" scheme="/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>网易秋招笔试题</title>
    <link href="/2017/08/14/%E7%BD%91%E6%98%93%E7%A7%8B%E6%8B%9B%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    <id>/2017/08/14/网易秋招笔试题/</id>
    <published>2017-08-14T11:03:32.000Z</published>
    <updated>2019-07-15T02:16:33.361Z</updated>
    
    <content type="html"><![CDATA[<!--TOC--><h2 id="独立的小易"><a href="#独立的小易" class="headerlink" title="独立的小易"></a>独立的小易</h2><p>小易为了向他的父母表现他已经长大独立了,他决定搬出去自己居住一段时间。一个人生活增加了许多花费: 小易每天必须吃一个水果并且需要每天支付x元的房屋租金。当前小易手中已经有f个水果和d元钱,小易也能去商店购买一些水果,商店每个水果售卖p元。小易为了表现他独立生活的能力,希望能独立生活的时间越长越好,小易希望你来帮他计算一下他最多能独立生活多少天。<br><a id="more"></a><br><strong>输入描述:</strong><br>输入包括一行,四个整数x, f, d, p(1 ≤ x,f,d,p ≤ 2 * 10^9),以空格分割</p><p><strong>输入例子1:</strong><br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">5</span> <span class="number">100</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></p><p><strong>输出例子1:</strong><br>11</p><p><strong>解题思路：</strong><br>首先在有水果的情况下，先消耗水果，此时小易只需要支付房租的费用就行；而当水果吃完后，每一天的消耗费用为(x+p)元，所以直接拿剩余的钱d去除以(x+p)就行了。<br>（这里提示了四个整数都小于2*10^9，且之间没有相乘关系，所以int不会越界，但是如果房租x和水果数f较多时，可能会出现超时的情况）</p><p><strong>通过代码：</strong><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line">public class Main &#123;</span><br><span class="line"> </span><br><span class="line">public static void main(String []args) &#123;</span><br><span class="line">        int a[] = new int[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        a[<span class="number">0</span>]=sc.nextInt();</span><br><span class="line">        a[<span class="number">1</span>]=sc.nextInt();</span><br><span class="line">        a[<span class="number">2</span>]=sc.nextInt();</span><br><span class="line">        a[<span class="number">3</span>]=sc.nextInt();</span><br><span class="line"></span><br><span class="line">        int day = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    if(a[<span class="number">2</span>]&gt;=a[<span class="number">0</span>]*a[<span class="number">1</span>]) &#123;</span><br><span class="line">            </span><br><span class="line">            a[<span class="number">2</span>]=a[<span class="number">2</span>]-a[<span class="number">0</span>]*a[<span class="number">1</span>];</span><br><span class="line">            </span><br><span class="line">            day=a[<span class="number">1</span>];</span><br><span class="line">            </span><br><span class="line">            a[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">         while(a[<span class="number">2</span>]&gt;=<span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            if(a[<span class="number">1</span>]&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                a[<span class="number">2</span>]-=a[<span class="number">0</span>];</span><br><span class="line">                a[<span class="number">1</span>]--;</span><br><span class="line">                if(a[<span class="number">2</span>]&lt;<span class="number">0</span>) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                day++;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                int res = (a[<span class="number">2</span>]/(a[<span class="number">0</span>]+a[<span class="number">3</span>]));</span><br><span class="line">                day = day+ res;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(day);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>官方解答：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x, f, d, p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> f, <span class="keyword">int</span> d, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp1 = d / x;</span><br><span class="line">    <span class="keyword">if</span>(tmp1 &lt;= f) <span class="keyword">return</span> tmp1;</span><br><span class="line">    d -= f * x;</span><br><span class="line">    <span class="keyword">return</span> f + d / (x + p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; f &gt;&gt; d &gt;&gt; p;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; solve(x, f, d, p) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;!--TOC--&gt;
&lt;h2 id=&quot;独立的小易&quot;&gt;&lt;a href=&quot;#独立的小易&quot; class=&quot;headerlink&quot; title=&quot;独立的小易&quot;&gt;&lt;/a&gt;独立的小易&lt;/h2&gt;&lt;p&gt;小易为了向他的父母表现他已经长大独立了,他决定搬出去自己居住一段时间。一个人生活增加了许多花费: 小易每天必须吃一个水果并且需要每天支付x元的房屋租金。当前小易手中已经有f个水果和d元钱,小易也能去商店购买一些水果,商店每个水果售卖p元。小易为了表现他独立生活的能力,希望能独立生活的时间越长越好,小易希望你来帮他计算一下他最多能独立生活多少天。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="programing" scheme="/tags/programing/"/>
    
  </entry>
  
  <entry>
    <title>JVM梳理</title>
    <link href="/2017/08/09/JVM/"/>
    <id>/2017/08/09/JVM/</id>
    <published>2017-08-09T03:33:17.000Z</published>
    <updated>2019-07-15T02:16:33.356Z</updated>
    
    <content type="html"><![CDATA[<!--TOC--><p>​ 在JAVA中，有一句口号我们众所周知，“一次编写，到处运行”。而支持JAVA这种特性的关键之处在于JAVA虚拟机和字节码存储格式，JAVA虚拟机不与JAVA变成语言捆绑，只与Class文件所关联。</p><a id="more"></a><p>正因为JAVA只与Class文件相关，它不关心Class的来源，所以虚拟机对Class文件的格式有着十分严格的定义，以便进行Class的合法性等的验证。而Class文件需要被JAVA虚拟机加载，才能最终被虚拟机执行。</p><h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><p>类从被加载到虚拟机到卸载出内存，它的整个生命周期有：<strong>加载、验证、准备、解析、初始化、使用、卸载</strong>。其中验证、准备和解析这3个部分统称为<strong>连接</strong>。</p><p>从类加载的原则上来说，类的生命周期一般是按照这个顺序来的，这里我们重点来看看<strong>加载、验证、准备、解析和初始化</strong>这5个过程，这5个过程是类在使用之前会完成。下面我们重点来介绍一下类不同生命周期的具体过程。</p><img src="/2017/08/09/JVM/JVM类加载机制.JPG" title="JVM类加载机制"><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>在加载阶段，虚拟机要完成以下3件事情：</p><ul><li>获取类定义的二级制流（通过类的全限定名来获取）</li><li>将二级制流所代表的静态存储结构转化为方法去的运行时数据结构</li><li>在内存中生成一个代表该类的java.lang.Class对象</li></ul><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>​验证是连接阶段的第一步，这一阶段的目的主要是为了验证Class文件的正确性，JAVA虚拟机对Class文件的来源并没有要求，甚至我们可以用文本编辑器来编写Class文件，所以验证是非常有必要的，验证是否严谨，直接关系虚拟机最终运行的正确性。</p><p>​验证阶段主要包括对Class文件格式的验证、元数据的验证、字节码的验证以及符号引用的验证。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>准备阶段是开始为类变量进行内存分配并设置变量的初始值。这里说明一下类变量是指<strong>被static修饰的变量</strong>，而不包含实例变量。</p><p>这里的类变量的初始化时在方法区中进行内存分配，而不是在堆中进行的。这里说的变量的初始值，是指设置成零值。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="keyword">value</span> = <span class="number">100</span>; <span class="comment">//在类变量初始化阶段，value的值为0，而不是100</span></span><br></pre></td></tr></table></figure><p>当然，变量被设置成零值，也不是绝对的，如果该类变量是常量的话，则会直接设置成常量值。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>解析阶段是虚拟机将常量池内的符号引用替换成直接引用的过程。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>类的初始化是类加载过程的最后一步，在准备阶段，类变量已经进行了初始化，在初始化阶段，虚拟机会根据程序来初始化类变量和其他资源。</p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>类加载器是用于实现类的加载动作，在JAVA中，类的唯一性是由类和加载该类的加载器一同唯一决定的。每一个类加载器，都拥有一个独立的类名称空间。所以简单的来说，如果两个类相等，只有在这两个类是由同一个类加载器加载的前提下有成立。</p><h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><p>从JAVA虚拟机的角度来说，存在两种不同的类加载器：启动类加载器和其他类加载器。启动类加载器是由C++来实现的，是虚拟机的一部分；而其他类加载器则有JAVA来实现，独立于虚拟机，且继承自java.lang.ClassLoader。</p><p>从开发者的角度来看，JAVA程序一般使用下面3中类加载器：启动类加载器，扩展类加载器、应用程序类加载器。</p><ol><li><p><strong>启动类加载器（Bootstrap ClassLoader）：</strong>该类负责加载\lib目录中的，并且被虚拟机识别的类库。</p></li><li><p><strong>扩展类加载器（Extension ClassLoader）：</strong>该类负责加载\lib\ext目录中的类库。</p></li><li><p><strong>应用程序类加载器（Application ClassLoader)：</strong>该类负责加载用户类路径上所指定的类库。</p></li></ol><p>​ 我们的应用程序一般都是由这3种类加载器加载的，当然，如果有必要，我们也可以加入自己定义的类加载器。而这3种类的层次关系我们称为<strong>双亲委派模型</strong>。该模型除了顶层的启动类加载器外，其余的类加载器都有自己的父类加载器。</p><h4 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h4><img src="/2017/08/09/JVM/双亲委派模型.JPG" title="双亲委派模型"><p>当一个类加载器收到了类加载请求的时候，它会首先委派给父类加载器去完成，而每一个加载器都会如此执行，只有当父类加载器无法完成类加载的时候，子加载器才会尝试自己去加载。使用双亲委派模型的一个好处是Java类会随着类加载机制具备了一种优先级的层级关系。</p>]]></content>
    
    <summary type="html">
    
      &lt;!--TOC--&gt;
&lt;p&gt;​ 在JAVA中，有一句口号我们众所周知，“一次编写，到处运行”。而支持JAVA这种特性的关键之处在于JAVA虚拟机和字节码存储格式，JAVA虚拟机不与JAVA变成语言捆绑，只与Class文件所关联。&lt;/p&gt;
    
    </summary>
    
      <category term="聚沙成塔" scheme="/categories/record/"/>
    
    
      <category term="record" scheme="/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>OAuth浅析</title>
    <link href="/2017/08/07/OAuth%E6%B5%85%E6%9E%90/"/>
    <id>/2017/08/07/OAuth浅析/</id>
    <published>2017-08-07T07:56:13.000Z</published>
    <updated>2019-07-15T02:16:33.351Z</updated>
    
    <content type="html"><![CDATA[<!--TOC--><p>&emsp;&emsp;OAuth是一个开放标准。它允许第三方网站在用户授权的前提下访问用户在服务商那里存储的信息。例如我们微信登录后通过一些链接访问其他的应用，例如大众点评，它会提示是否通过微信授权访问，如果用户确认ok，则大众点评的app就可以拿到微信中的账户信息甚至联系人列表等信息。<br><a id="more"></a><br>这种授权无需将用户提供用户名和密码提供给该第三方网站。OAuth允许用户提供一个令牌给第三方网站，一个令牌对应一个特定的第三方网站，同时该令牌只能在特定的时间内访问特定的资源。</p><h2 id="OAuth认证及授权流程"><a href="#OAuth认证及授权流程" class="headerlink" title="OAuth认证及授权流程"></a>OAuth认证及授权流程</h2><p>OAuth认证和授权的过程如下：</p><ol><li><p>Client请求Resource Owner授权，请求一般包含：要访问的资源路径，操作类型，Client的身份等信息。</p></li><li><p>ResourceOwner批准授权，并将“授权证据”发送给Client。典型的做法是，AuthorizationServer 提供授权审批界面，让ResourceOwner显式批准。</p></li><li><p>Client使用上一步获得的Token，想AuthorizationServer申请令牌。</p></li><li><p>认证服务器对客户端进行认证后，确认无误后统一发放令牌。</p></li><li><p>Client携带“访问令牌”访问ResourceServer上的资源。在令牌的有效期内，Client可以多次携带令牌去访问资源。</p></li><li><p>ResourceServer验证令牌的有效性，比如是否伪造、是否越权、是否过期，通过验证后，才能提供服务。</p></li></ol><img src="/2017/08/07/OAuth浅析/OAuth认证及授权流程.JPG" title="OAuth认证及授权流程"><h2 id="OAuth-2-0"><a href="#OAuth-2-0" class="headerlink" title="OAuth 2.0"></a>OAuth 2.0</h2><p>&emsp;&emsp;OAuth 2.0定义了四种授权方式。 授权码模式（authorization code） 简化模式（implicit） 密码模式（resource owner password credentials） 客户端模式（client credentials）</p><p>授权码模式是功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与”服务提供商”的认证服务器进行互动。 流程图如下：</p><ol><li><p>用户访问客户端，后者将前者导向认证服务器。</p></li><li><p>用户选择是否给予客户端授权。</p></li><li><p>假设用户给予授权，认证服务器将用户导向客户端事先指定的”重定向URI”（redirection URI），同时附上一个授权码。</p></li><li><p>客户端收到授权码，附上早先的”重定向URI”，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。</p></li><li><p>认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。</p></li></ol><img src="/2017/08/07/OAuth浅析/OAuth认证授权码模式.JPG" title="OAuth认证授权码模式">]]></content>
    
    <summary type="html">
    
      &lt;!--TOC--&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;OAuth是一个开放标准。它允许第三方网站在用户授权的前提下访问用户在服务商那里存储的信息。例如我们微信登录后通过一些链接访问其他的应用，例如大众点评，它会提示是否通过微信授权访问，如果用户确认ok，则大众点评的app就可以拿到微信中的账户信息甚至联系人列表等信息。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="聚沙成塔" scheme="/categories/record/"/>
    
    
      <category term="OAuth" scheme="/tags/OAuth/"/>
    
  </entry>
  
  <entry>
    <title>jdk编年史</title>
    <link href="/2017/08/04/jdk%E7%BC%96%E5%B9%B4%E5%8F%B2/"/>
    <id>/2017/08/04/jdk编年史/</id>
    <published>2017-08-04T11:57:58.000Z</published>
    <updated>2019-07-15T02:16:33.349Z</updated>
    
    <content type="html"><![CDATA[<!--TOC--><p>&emsp;&emsp;Java语言自JDK 1.0版本以来经历了许多次更新，也大量在基本的程序库中增加了类别和包。从J2SE 1.4开始，Java语言的变动受到Java Community Process（JCP）的约束，JCP使用Java规范请求来建议和定义对Java平台内容的新增和修改。<br><a id="more"></a></p><h2 id="Java-8-0"><a href="#Java-8-0" class="headerlink" title="Java 8.0"></a>Java 8.0</h2><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><p>Java 8 引入的一个核心概念是函数式接口（Functional Interfaces）。通过在接口里面添加一个抽象方法，这些方法可以直接从接口中运行。如果一个接口定义个唯一一个抽象方法，那么这个接口就成为函数式接口。同时，引入了一个新的注解：@FunctionalInterface。可以把他它放在一个接口前，表示这个接口是一个函数式接口。这个注解是非必须的，只要接口只包含一个方法的接口，虚拟机会自动判断，不过最好在接口上使用注解 @FunctionalInterface 进行声明。在接口中添加了 @FunctionalInterface 的接口，只允许有一个抽象方法，否则编译器也会报错。</p><p>java.lang.Runnable 就是一个函数式接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>函数式接口的重要属性是：我们能够使用 Lambda 实例化它们，Lambda 表达式让你能够将函数作为方法参数，或者将代码作为数据对待。Lambda 表达式的引入给开发者带来了不少优点：在 Java 8 之前，匿名内部类，监听器和事件处理器的使用都显得很冗长，代码可读性很差，Lambda 表达式的应用则使代码变得更加紧凑，可读性增强；Lambda 表达式使并行操作大集合变得很方便，可以充分发挥多核 CPU 的优势，更易于为多核处理器编写代码；</p><p>Lambda 表达式由三个部分组成：第一部分为一个括号内用逗号分隔的形式参数，参数是函数式接口里面方法的参数；第二部分为一个箭头符号：-&gt;；第三部分为方法体，可以是表达式和代码块。语法如下：</p><ol><li><p>方法体为表达式，该表达式的值作为返回值返回。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="params">(parameters)</span> -&gt;</span> expression</span><br></pre></td></tr></table></figure></li><li><p>方法体为代码块，必须用 {} 来包裹起来，且需要一个 return 返回值，但若函数式接口里面方法返回值是 void，则无需返回值。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="params">(parameters)</span> -&gt;</span> &#123; statements; &#125;</span><br><span class="line">例如，下面是使用匿名内部类和 Lambda 表达式的代码比较。</span><br></pre></td></tr></table></figure></li></ol><ul><li>Java 8 在 java.util.function 中增加了不少新的函数式通用接口。例如：<br>Function&lt;T, R&gt;：将 T 作为输入，返回 R 作为输出，他还包含了和其他函数组合的默认方法。<br>Predicate<t> ：将 T 作为输入，返回一个布尔值作为输出，该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（与、或、非）。<br>Consumer<t> ：将 T 作为输入，不返回任何内容，表示在单个参数上的操作。</t></t></li></ul><h3 id="接口的增强"><a href="#接口的增强" class="headerlink" title="接口的增强"></a>接口的增强</h3><p>Java 8 对接口做了进一步的增强。在接口中可以添加使用 default 关键字修饰的非抽象方法。还可以在接口中定义静态方法。如今，接口看上去与抽象类的功能越来越类似了。</p><ul><li>默认方法</li></ul><p>Java 8 还允许我们给接口添加一个非抽象的方法实现，只需要使用 default 关键字即可，这个特征又叫做扩展方法。在实现该接口时，该默认扩展方法在子类上可以直接使用，它的使用方式类似于抽象类中非抽象成员方法。但扩展方法不能够重载 Object 中的方法。例如：toString、equals、 hashCode 不能在接口中被重载。</p><p>例如，下面接口中定义了一个默认方法 count()，该方法可以在子类中直接使用。<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DefaultFunInterface</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义默认方法 count</span></span><br><span class="line"><span class="keyword">default</span> <span class="keyword">int</span> <span class="keyword">count</span>()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubDefaultFunClass</span> <span class="keyword">implements</span> <span class="title">DefaultFunInterface</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args)&#123;</span><br><span class="line"><span class="comment">//实例化一个子类对象，改子类对象可以直接调用父接口中的默认方法 count</span></span><br><span class="line"> SubDefaultFunClass sub = <span class="keyword">new</span> SubDefaultFunClass();</span><br><span class="line">sub.<span class="keyword">count</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>静态方法<br>在接口中，还允许定义静态的方法。接口中的静态方法可以直接用接口来调用。<br>例如，下面接口中定义了一个静态方法 find，该方法可以直接用 StaticFunInterface .find() 来调用。<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">StaticFunInterface</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestStaticFun</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;</span><br><span class="line"><span class="comment">//接口中定义了静态方法 find 直接被调用</span></span><br><span class="line">StaticFunInterface.fine();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="集合之流式操作"><a href="#集合之流式操作" class="headerlink" title="集合之流式操作"></a>集合之流式操作</h3><p>Java 8 引入了流式操作（Stream），通过该操作可以实现对集合（Collection）的并行处理和函数式操作。根据操作返回的结果不同，流式操作分为中间操作和最终操作两种。最终操作返回一特定类型的结果，而中间操作返回流本身，这样就可以将多个操作依次串联起来。根据流的并发性，流又可以分为串行和并行两种。流式操作实现了集合的过滤、排序、映射等功能。</p><p>Stream 和 Collection 集合的区别：Collection 是一种静态的内存数据结构，而 Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。</p><ul><li>串行和并行的流</li></ul><p>流有串行和并行两种，串行流上的操作是在一个线程中依次完成，而并行流则是在多个线程上同时执行。并行与串行的流可以相互切换：通过 stream.sequential() 返回串行的流，通过 stream.parallel() 返回并行的流。相比较串行的流，并行的流可以很大程度上提高程序的执行效率。</p><p>下面是分别用串行和并行的方式对集合进行排序。</p><p><strong>串行排序：</strong><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">String</span>&gt; list = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line"><span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;</span><br><span class="line"><span class="keyword">double</span> d = Math.<span class="built_in">random</span>()*<span class="number">1000</span>;</span><br><span class="line">list.add(d+<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> start = System.nanoTime();<span class="comment">//获取系统开始排序的时间点</span></span><br><span class="line"><span class="keyword">int</span> count= (<span class="keyword">int</span>) ((<span class="built_in">Stream</span>) list.stream().sequential()).sorted().count();</span><br><span class="line"><span class="keyword">long</span> <span class="built_in">end</span> = System.nanoTime();<span class="comment">//获取系统结束排序的时间点</span></span><br><span class="line"><span class="keyword">long</span> ms = TimeUnit.NANOSECONDS.toMillis(<span class="built_in">end</span>-start);<span class="comment">//得到串行排序所用的时间</span></span><br><span class="line">System.out.<span class="built_in">println</span>(ms+”ms”);</span><br></pre></td></tr></table></figure></p><p><strong>并行排序：</strong><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">String</span>&gt; list = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line"><span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;</span><br><span class="line"><span class="keyword">double</span> d = Math.<span class="built_in">random</span>()*<span class="number">1000</span>;</span><br><span class="line">list.add(d+<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> start = System.nanoTime();<span class="comment">//获取系统开始排序的时间点</span></span><br><span class="line"><span class="keyword">int</span> count = (<span class="keyword">int</span>)((<span class="built_in">Stream</span>) list.stream().parallel()).sorted().count();</span><br><span class="line"><span class="keyword">long</span> <span class="built_in">end</span> = System.nanoTime();<span class="comment">//获取系统结束排序的时间点</span></span><br><span class="line"><span class="keyword">long</span> ms = TimeUnit.NANOSECONDS.toMillis(<span class="built_in">end</span>-start);<span class="comment">//得到并行排序所用的时间</span></span><br><span class="line">System.out.<span class="built_in">println</span>(ms+”ms”);</span><br></pre></td></tr></table></figure></p><ul><li>中间操作</li></ul><p>该操作会保持 stream 处于中间状态，允许做进一步的操作。它返回的还是的 Stream，允许更多的链式操作。常见的中间操作有：<br>filter()：对元素进行过滤；<br>sorted()：对元素排序；<br>map()：元素的映射；<br>distinct()：去除重复元素；<br>subStream()：获取子 Stream 等。</p><p>例如，下面是对一个字符串集合进行过滤，返回以“s”开头的字符串集合，并将该集合依次打印出来：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.stream()</span><br><span class="line">.filter<span class="function"><span class="params">((s) -&gt; s.startsWith(<span class="string">"s"</span>))</span></span></span><br><span class="line"><span class="function">.<span class="title">forEach</span><span class="params">(System.out::println)</span>;</span></span><br></pre></td></tr></table></figure></p><h3 id="注解的更新"><a href="#注解的更新" class="headerlink" title="注解的更新"></a>注解的更新</h3><p>对于注解，Java 8 主要有两点改进：类型注解和重复注解。<br>Java 8 的类型注解扩展了注解使用的范围。在该版本之前，注解只能是在声明的地方使用。现在几乎可以为任何东西添加注解：局部变量、类与接口，就连方法的异常也能添加注解。新增的两个注释的程序元素类型 ElementType.TYPE_USE 和 ElementType.TYPE_PARAMETER 用来描述注解的新场合。ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中。而 ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中（例如声明语句、泛型和强制转换语句中的类型）。</p><p>在编译的时候被排查出来。Java 8 本身虽然没有自带类型检测的框架，但可以通过使用 Checker Framework 这样的第三方工具，自动检查和确认软件的缺陷，提高生产效率。</p><p>例如，下面的代码可以通过编译，但是运行时会报 NullPointerException 的异常。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestAnno</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">Object obj = <span class="literal">null</span>;</span><br><span class="line">obj.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了能在编译期间就自动检查出这类异常，可以通过类型注解结合 Checker Framework 提前排查出来：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.checkerframework.checker.nullness.qual.NonNull;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAnno</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="meta">@NonNull</span> Object obj = <span class="keyword">null</span>;</span><br><span class="line">obj.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译时自动检测结果如下：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">C:</span>\workspace\TestJava8\src\TestAnno.<span class="string">java:</span><span class="number">4</span>: <span class="string">Warning:</span></span><br><span class="line">  (assignment.type.incompatible) $$ <span class="number">2</span> $$ <span class="literal">null</span> $$ <span class="meta">@UnknownInitialization</span> <span class="meta">@NonNull</span> Object $$ ( <span class="number">152</span>, <span class="number">156</span> )</span><br><span class="line">  $$ incompatible types <span class="keyword">in</span> assignment.</span><br><span class="line"><span class="meta">@NonNull</span> Object obj = <span class="literal">null</span>;</span><br><span class="line"> ^</span><br><span class="line"> <span class="string">found :</span> <span class="literal">null</span></span><br><span class="line"><span class="symbol"> required:</span> <span class="meta">@UnknownInitialization</span> <span class="meta">@NonNull</span> Object</span><br></pre></td></tr></table></figure></p><ul><li>重复注解</li></ul><p>另外，在该版本之前使用注解的一个限制是相同的注解在同一位置只能声明一次，不能声明多次。Java 8 引入了重复注解机制，这样相同的注解可以在同一地方声明多次。重复注解机制本身必须用 @Repeatable 注解。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> \\该注解存在于类文件中并在运行时可以通过反射获取</span><br><span class="line"><span class="meta">@interface</span> Annots &#123;</span><br><span class="line">Annot[] value();</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> \\该注解存在于类文件中并在运行时可以通过反射获取</span><br><span class="line"><span class="meta">@Repeatable(Annots.class)</span></span><br><span class="line"><span class="meta">@interface</span> Annot &#123;</span><br><span class="line">String value();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Annot(<span class="meta-string">"a1"</span>)</span><span class="meta">@Annot(<span class="meta-string">"a2"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">Annots annots1 = Test.<span class="keyword">class</span>.getAnnotation(Annots.<span class="keyword">class</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println(annots1.value()[<span class="number">0</span>]+<span class="string">","</span>+annots1.value()[<span class="number">1</span>]); </span><br><span class="line"><span class="comment">// 输出: @Annot(value=a1),@Annot(value=a2)</span></span><br><span class="line">Annot[] annots2 = Test.<span class="keyword">class</span>.getAnnotationsByType(Annot.<span class="keyword">class</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println(annots2[<span class="number">0</span>]+<span class="string">","</span>+annots2[<span class="number">1</span>]); </span><br><span class="line"><span class="comment">// 输出: @Annot(value=a1),@Annot(value=a2)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释 Annot 被 @Repeatable( Annots.class ) 注解。Annots 只是一个容器，它包含 Annot 数组, 编译器尽力向程序员隐藏它的存在。通过这样的方式，Test 类可以被 Annot 注解两次。重复注释的类型可以通过 getAnnotationsByType() 方法来返回。</p><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>Java 8 在安全性上对许多方面进行了增强，也为此推迟了它的发布日期。下面例举其中几个关于安全性的更新：</p><p>支持更强的基于密码的加密算法。基于 AES 的加密算法，例如 PBEWithSHA256AndAES_128 和 PBEWithSHA512AndAES_256，已经被加入进来。</p><p>在客户端，TLS1.1 和 TLS1.2 被设为默认启动。并且可以通过新的系统属性包 jdk.tls.client.protocols 来对它进行配置。</p><p>Keystore 的增强，包含新的 Keystore 类型 java.security.DomainLoadStoreParameter 和为 Keytool 这个安全钥匙和证书的管理工具添加新的命令行选项-importpassword。同时，添加和更新了一些关于安全性的 API 来支持 KeyStore 的更新。</p><p>支持安全的随机数发生器。如果随机数来源于随机性不高的种子，那么那些用随机数来产生密钥或者散列敏感信息的系统就更易受攻击。SecureRandom 这个类的 getInstanceStrong 方法如今可以获取各个平台最强的随机数对象实例，通过这个实例生成像 RSA 私钥和公钥这样具有较高熵的随机数。</p><p>安全性比较差的加密方法被默认禁用。默认不支持 DES 相关的 Kerberos 5 加密方法。如果一定要使用这类弱加密方法需要在 krb5.conf 文件中添加 allow_weak_crypto=true。考虑到这类加密方法安全性极差，开发者应该尽量避免使用它。</p><h3 id="IO-NIO的改进"><a href="#IO-NIO的改进" class="headerlink" title="IO/NIO的改进"></a>IO/NIO的改进</h3><p>Java 8 对 IO/NIO 也做了一些改进。主要包括：改进了 java.nio.charset.Charset 的实现，使编码和解码的效率得以提升，也精简了 jre/lib/charsets.jar 包；优化了 String(byte[],*) 构造方法和 String.getBytes() 方法的性能；还增加了一些新的 IO/NIO 方法，使用这些方法可以从文件或者输入流中获取流（java.util.stream.Stream），通过对流的操作，可以简化文本行处理、目录遍历和文件查找。</p><p>新增的 API 如下：<br>BufferedReader.line(): 返回文本行的流 Stream<string><br>File.lines(Path, Charset):返回文本行的流 Stream<string><br>File.list(Path): 遍历当前目录下的文件和目录<br>File.walk(Path, int, FileVisitOption): 遍历某一个目录下的所有文件和指定深度的子目录<br>File.find(Path, int, BiPredicate, FileVisitOption… ): 查找相应的文件</string></string></p><p>下面就是用流式操作列出当前目录下的所有文件和目录：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Files</span><span class="selector-class">.list</span>(<span class="selector-tag">new</span> <span class="selector-tag">File</span>(".")<span class="selector-class">.toPath</span>())</span><br><span class="line"> <span class="selector-class">.forEach</span>(<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-pseudo">::println)</span>;</span><br></pre></td></tr></table></figure></p><h3 id="全球化功能"><a href="#全球化功能" class="headerlink" title="全球化功能"></a>全球化功能</h3><p>Java 8 吸收了 Joda-Time 的精华，以一个新的开始为 Java 创建优秀的 API。新的 java.time 中包含了所有关于时钟（Clock），本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）、时区（ZonedDateTime）和持续时间（Duration）的类。历史悠久的 Date 类新增了 toInstant() 方法，用于把 Date 转换成新的表示形式。这些新增的本地化时间日期 API 大大简化了了日期时间和本地化的管理。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate = LocalDate.now(); <span class="comment">//获取本地日期</span></span><br><span class="line">localDate = LocalDate.ofYearDay(2014, 200); <span class="comment">// 获得 2014 年的第 200 天 </span></span><br><span class="line">System.<span class="keyword">out</span>.println(localDate.<span class="keyword">toString</span>());<span class="comment">//输出：2014-07-19</span></span><br><span class="line">localDate = LocalDate.of(2014, Month.SEPTEMBER, 10); <span class="comment">//2014 年 9 月 10 日 </span></span><br><span class="line">System.<span class="keyword">out</span>.println(localDate.<span class="keyword">toString</span>());<span class="comment">//输出：2014-09-10</span></span><br><span class="line"><span class="comment">//LocalTime</span></span><br><span class="line">LocalTime localTime = LocalTime.now(); <span class="comment">//获取当前时间</span></span><br><span class="line">System.<span class="keyword">out</span>.println(localTime.<span class="keyword">toString</span>());<span class="comment">//输出当前时间</span></span><br><span class="line">localTime = LocalTime.of(10, 20, 50);<span class="comment">//获得 10:20:50 的时间点</span></span><br><span class="line">System.<span class="keyword">out</span>.println(localTime.<span class="keyword">toString</span>());<span class="comment">//输出: 10:20:50</span></span><br><span class="line"><span class="comment">//Clock 时钟</span></span><br><span class="line">Clock clock = Clock.systemDefaultZone();<span class="comment">//获取系统默认时区 (当前瞬时时间 )</span></span><br><span class="line">long millis = clock.millis();<span class="comment">//</span></span><br></pre></td></tr></table></figure><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>在新增Stream机制与lambda的基础之上，在java.util.concurrent.ConcurrentHashMap中加入了一些新方法来支持聚集操作。同时也在java.util.concurrent.ForkJoinPool类中加入了一些新方法来支持共有资源池（common pool）</p><p>新增的java.util.concurrent.locks.StampedLock类提供一直基于容量的锁，这种锁有三个模型来控制读写操作（它被认为是不太有名的java.util.concurrent.locks.ReadWriteLock类的替代者）。</p><p>在java.util.concurrent.atomic包中还增加了下面这些类</p><ul><li>DoubleAccumulator</li><li>DoubleAdder</li><li>LongAccumulator</li><li>LongAdder</li></ul><p>使用了java.util.concurrent.atomic则这些操作都是具有原子性的。<br>【注意】<br>对于32位操作系统来说，单次次操作能处理的最长长度为32bit，而long类型8字节64bit，所以对long的读写都要两条指令才能完成（即每次读写64bit中的32bit）。如果JVM要保证long和double读写的原子性，势必要做额外的处理。 那么，JVM有对这一情况进行额外处理吗？<br>针对这一问题可以参考Java语言规范文档：<a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.7" target="_blank" rel="noopener">jls-17 Non-Atomic Treatment of double and long</a></p><p>从规定中我们可以知道:</p><ol><li>对于64位的long和double，如果没有被volatile修饰，那么对其操作可以不是原子的。在操作的时候，可以分成两步，每次对32位操作。</li><li>如果使用volatile修饰long和double，那么其读写都是原子操作</li><li>对于64位的引用地址的读写，都是原子操作</li><li>在实现JVM时，可以自由选择是否把读写long和double作为原子操作</li><li>推荐JVM实现为原子操作</li></ol><p>对于64bit的环境来说，单次操作可以操作64bit的数据，即可以以一次性读写long或double的整个64bit。因此在64位的环境下，long和double的读写是原子操作。</p><h3 id="JVM的新特性"><a href="#JVM的新特性" class="headerlink" title="JVM的新特性"></a>JVM的新特性</h3><p>JVM内存永久区已经被metaspace替换（JEP 122）。JVM参数 -XX:PermSize 和 –XX:MaxPermSize被XX:MetaSpaceSize 和 -XX:MaxMetaspaceSize代替。</p><h2 id="Java-7-0"><a href="#Java-7-0" class="headerlink" title="Java 7.0"></a>Java 7.0</h2><h3 id="switch中可以使用字串"><a href="#switch中可以使用字串" class="headerlink" title="switch中可以使用字串"></a>switch中可以使用字串</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Java代码： </span><br><span class="line"></span><br><span class="line"><span class="keyword">String</span> s = <span class="string">"test"</span>;   </span><br><span class="line"></span><br><span class="line"><span class="built_in">switch</span> (s) &#123;   </span><br><span class="line"></span><br><span class="line">  <span class="built_in">case</span> <span class="string">"test"</span> :   </span><br><span class="line"></span><br><span class="line">     System.out.<span class="built_in">println</span>(<span class="string">"test"</span>);  </span><br><span class="line"></span><br><span class="line">  <span class="built_in">case</span> <span class="string">"test1"</span> :   </span><br><span class="line"></span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"test1"</span>); </span><br><span class="line"></span><br><span class="line">    <span class="built_in">break</span> ;   </span><br><span class="line"></span><br><span class="line">  <span class="built_in">default</span> :   </span><br><span class="line"></span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"break"</span>); </span><br><span class="line"></span><br><span class="line">    <span class="built_in">break</span> ;   </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对集合类的语言支持；"><a href="#对集合类的语言支持；" class="headerlink" title="对集合类的语言支持；"></a>对集合类的语言支持；</h3><p>Java将包含对创建集合类的第一类语言支持。这意味着集合类的创建可以像Ruby和Perl那样了。创建List / Set / Map 时写法更简单了。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java 1.7以前</span></span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;<span class="built_in">String</span>&gt;(); </span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.add(<span class="string">"item"</span>); </span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> item = <span class="built_in">list</span>.get(<span class="number">0</span>); </span><br><span class="line">         </span><br><span class="line"><span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; <span class="built_in">set</span> = <span class="literal">new</span> HashSet&lt;<span class="built_in">String</span>&gt;(); </span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>.add(<span class="string">"item"</span>); </span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt; <span class="built_in">map</span> = <span class="literal">new</span> HashMap&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt;(); </span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.put(<span class="string">"key"</span>, <span class="number">1</span>); </span><br><span class="line"></span><br><span class="line">int value = <span class="built_in">map</span>.get(<span class="string">"key"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java 1.7支持</span></span><br><span class="line"><span class="built_in">List</span>&lt; <span class="built_in">String</span>&gt; list = [<span class="string">"item"</span>];  </span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> item = list[<span class="number">0</span>];  </span><br><span class="line"></span><br><span class="line"><span class="built_in">Set</span>&lt; <span class="built_in">String</span> &gt; <span class="keyword">set</span> = &#123;<span class="string">"item"</span>&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>&lt; <span class="built_in">String</span>,Integer &gt; map = &#123;<span class="string">"key"</span> : <span class="number">1</span>&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> value = map[<span class="string">"key"</span>];</span><br></pre></td></tr></table></figure><h3 id="自动资源管理；"><a href="#自动资源管理；" class="headerlink" title="自动资源管理；"></a>自动资源管理；</h3><p>Java中某些资源是需要手动关闭的，如InputStream，Writes，Sockets，Sql classes等。这个新的语言特性允许try语句本身申请更多的资源， </p><p>这些资源作用于try代码块，并自动关闭。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java 1.7以前</span></span><br><span class="line"><span class="keyword">BufferedReader</span> br = <span class="keyword">new</span> <span class="keyword">BufferedReader</span>(<span class="keyword">new</span> FileReader(path)); </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> br.readLine(); </span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123; </span><br><span class="line"></span><br><span class="line">br.close(); </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java 1.7支持</span></span><br><span class="line"> <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">FileReader</span>(path)) &#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> br.readLine(); </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="改进的通用实例创建类型推断；"><a href="#改进的通用实例创建类型推断；" class="headerlink" title="改进的通用实例创建类型推断；"></a>改进的通用实例创建类型推断；</h3><p>Java 1.7增强的对通用实例创建（diamond）的类型推断 </p><p>类型推断是一个特殊的烦恼，下面的代码：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; anagrams = <span class="keyword">new</span> HashMap&lt;<span class="built_in">String</span>, <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt;();</span><br></pre></td></tr></table></figure></p><p>通过类型推断后变成：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; anagrams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure></p><p>这个&lt;&gt;被叫做diamond（钻石）运算符，这个运算符从引用的声明中推断类型。 </p><h3 id="数字字面量下划线支持；"><a href="#数字字面量下划线支持；" class="headerlink" title="数字字面量下划线支持；"></a>数字字面量下划线支持；</h3><p>很长的数字可读性不好，在Java 7中可以使用下划线分隔长int以及long了<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int one_million = <span class="number">1</span>_000_000<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>运算时先去除下划线，如：1_1 * 10 = 110，120 – 1_0 = 110 </p><h3 id="二进制字面量；"><a href="#二进制字面量；" class="headerlink" title="二进制字面量；"></a>二进制字面量；</h3><p>由于继承C语言，Java代码在传统上迫使程序员只能使用十进制，八进制或十六进制来表示数(numbers)。 </p><p>由于很少的域是以bit导向的，这种限制可能导致错误。你现在可以使用0b前缀创建二进制字面量：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">binary</span> = <span class="number">0b1001</span>_1001<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><h3 id="简化可变参数方法调用；"><a href="#简化可变参数方法调用；" class="headerlink" title="简化可变参数方法调用；"></a>简化可变参数方法调用；</h3><p>程序员试图使用一个不可具体化的可变参数并调用一个<em>varargs</em> （可变）方法时，编辑器会生成一个“非安全操作”的警告。 </p><p>JDK 7将警告从call转移到了方法声明(methord declaration)的过程中。这样API设计者就可以使用vararg，因为警告的数量大大减少了。 </p><h3 id="新增一些取环境信息的工具方法；"><a href="#新增一些取环境信息的工具方法；" class="headerlink" title="新增一些取环境信息的工具方法；"></a>新增一些取环境信息的工具方法；</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">File</span> <span class="keyword">System</span>.getJavaIoTempDir()  <span class="comment">// IO临时文件夹    </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">File</span> <span class="keyword">System</span>.getJavaHomeDir() <span class="comment">// JRE的安装目录    </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">File</span> <span class="keyword">System</span>.getUserHomeDir() <span class="comment">// 当前用户目录    </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">File</span> <span class="keyword">System</span>.getUserDir() <span class="comment">// 启动java进程时所在的目录</span></span><br></pre></td></tr></table></figure><h3 id="Boolean类型反转，空指针安全-参与位运算；"><a href="#Boolean类型反转，空指针安全-参与位运算；" class="headerlink" title="Boolean类型反转，空指针安全,参与位运算；"></a>Boolean类型反转，空指针安全,参与位运算；</h3><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Boolean</span> Booleans.negate(<span class="keyword">Boolean</span> booleanObj)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">True</span> =&gt; <span class="keyword">False</span> , <span class="keyword">False</span> =&gt; <span class="keyword">True</span>, <span class="keyword">Null</span> =&gt; <span class="keyword">Null</span>   </span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>  Booleans.<span class="keyword">and</span>( <span class="keyword">boolean</span> [] <span class="keyword">array</span>)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>  Booleans.<span class="keyword">or</span>( <span class="keyword">boolean</span> [] <span class="keyword">array</span>)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>  Booleans.<span class="keyword">xor</span>( <span class="keyword">boolean</span> [] <span class="keyword">array</span>)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>  Booleans.<span class="keyword">and</span>(<span class="keyword">Boolean</span>[] <span class="keyword">array</span>)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>  Booleans.<span class="keyword">or</span>(<span class="keyword">Boolean</span>[] <span class="keyword">array</span>)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>  Booleans.<span class="keyword">xor</span>(<span class="keyword">Boolean</span>[] <span class="keyword">array</span>)</span><br></pre></td></tr></table></figure><h3 id="两个char间的equals；"><a href="#两个char间的equals；" class="headerlink" title="两个char间的equals；"></a>两个char间的equals；</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span>  Character.equalsIgnoreCase( <span class="keyword">char</span>  ch1,  <span class="keyword">char</span>  ch2)</span><br></pre></td></tr></table></figure><h3 id="安全的加减乘除；"><a href="#安全的加减乘除；" class="headerlink" title="安全的加减乘除；"></a>安全的加减乘除；</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>  Math.safeToInt( <span class="keyword">long</span>  <span class="keyword">value</span>)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>  Math.safeNegate( <span class="keyword">int</span>  <span class="keyword">value</span>)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span>  Math.safeSubtract( <span class="keyword">long</span>  value1,  <span class="keyword">int</span>  value2)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span>  Math.safeSubtract( <span class="keyword">long</span>  value1,  <span class="keyword">long</span>  value2)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>  Math.safeMultiply( <span class="keyword">int</span>  value1,  <span class="keyword">int</span>  value2)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span>  Math.safeMultiply( <span class="keyword">long</span>  value1,  <span class="keyword">int</span>  value2)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span>  Math.safeMultiply( <span class="keyword">long</span>  value1,  <span class="keyword">long</span>  value2)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span>  Math.safeNegate( <span class="keyword">long</span>  <span class="keyword">value</span>)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>  Math.safeAdd( <span class="keyword">int</span>  value1,  <span class="keyword">int</span>  value2)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span>  Math.safeAdd( <span class="keyword">long</span>  value1,  <span class="keyword">int</span>  value2)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span>  Math.safeAdd( <span class="keyword">long</span>  value1,  <span class="keyword">long</span>  value2)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>  Math.safeSubtract( <span class="keyword">int</span>  value1,  <span class="keyword">int</span>  value2)</span><br></pre></td></tr></table></figure><h3 id="G1垃圾回收器"><a href="#G1垃圾回收器" class="headerlink" title="G1垃圾回收器"></a>G1垃圾回收器</h3><p>平时工作中大多数系统都使用CMS、即使静默升级到JDK7默认仍然采用CMS、那么G1相对于CMS的区别在：</p><ol><li>G1在压缩空间方面有优势</li><li>G1通过将内存空间分成区域（Region）的方式避免内存碎片问题</li><li>Eden, Survivor, Old区不再固定、在内存使用效率上来说更灵活</li><li>G1可以通过设置预期停顿时间（Pause Time）来控制垃圾收集时间避免应用雪崩现象</li><li>G1在回收内存后会马上同时做合并空闲内存的工作、而CMS默认是在STW（stop the world）的时候做</li><li>G1会在Young GC中使用、而CMS只能在O区使用</li></ol><h2 id="JAVA-6-0"><a href="#JAVA-6-0" class="headerlink" title="JAVA 6.0"></a>JAVA 6.0</h2><h3 id="Instrumentation-新功能"><a href="#Instrumentation-新功能" class="headerlink" title="Instrumentation 新功能"></a>Instrumentation 新功能</h3><p>Java SE 6 在 Instrumentation 方面的新特性。在 Java SE 6 里面，instrumentation 包被赋予了更强大的功能：启动后的instrument、本地代码 instrument，以及动态改变 classpath 等等。</p><h3 id="HTTP-增强"><a href="#HTTP-增强" class="headerlink" title="HTTP 增强"></a>HTTP 增强</h3><p>在 Java SE 6 之前， Java 一直都没有提供 Cookie 管理的功能。在 Java SE 5 里面， java.net 包里面有一个 CookieHandler 抽象类，不过并没有提供其他具体的实现。到了 Java SE 6， Cookie 相关的管理类在 Java 类库里面才得到了实现。有了这些 Cookie 相关支持的类，Java 开发者可以在服务器端编程中很好的操作 Cookie， 更好的支持 HTTP 相关应用，创建有状态的 HTTP 会话。</p><ul><li><p>用 HttpCookie 代表 Cookie<br>java.net.HttpCookie 类是 Java SE 6 新增的一个表示 HTTP Cookie 的新类， 其对象可以表示 Cookie 的内容， 可以支持所有三种 Cookie 规范：<br>Netscape 草案<br>RFC 2109 - <a href="http://www.ietf.org/rfc/rfc2109.txt" target="_blank" rel="noopener">http://www.ietf.org/rfc/rfc2109.txt</a><br>RFC 2965 - <a href="http://www.ietf.org/rfc/rfc2965.txt" target="_blank" rel="noopener">http://www.ietf.org/rfc/rfc2965.txt</a><br>这个类储存了 Cookie 的名称，路径，值，协议版本号，是否过期，网络域，最大生命期等等信息。</p></li><li><p>用 CookiePolicy 规定 Cookie 接受策略<br>java.net.CookiePolicy 接口可以规定 Cookie 的接受策略。 其中唯一的方法用来判断某一特定的 Cookie 是否能被某一特定的地址所接受。 这个类内置了 3 个实现的子类。一个类接受所有的 Cookie，另一个则拒绝所有，还有一个类则接受所有来自原地址的 Cookie。</p></li><li><p>用 CookieStore 储存 Cookie<br>java.net.CookieStore 接口负责储存和取出 Cookie。 当有 HTTP 请求的时候，它便储存那些被接受的 Cookie； 当有 HTTP 回应的时候，它便取出相应的 Cookie。 另外，当一个 Cookie 过期的时候，它还负责自动删去这个 Cookie。</p></li><li><p>用 CookieManger/CookieHandler 管理 Cookie<br>java.net.CookieManager 是整个 Cookie 管理机制的核心，它是 CookieHandler 的默认实现子类。下图显示了整个 HTTP Cookie 管理机制的结构：</p></li></ul><img src="/2017/08/04/jdk编年史/Cookie_管理类的关系.JPG" title="Cookie_管理类的关系"><p>一个 CookieManager 里面有一个 CookieStore 和一个 CookiePolicy，分别负责储存 Cookie 和规定策略。用户可以指定两者，也可以使用系统默认的 CookieManger。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个默认的 CookieManager </span></span><br><span class="line">CookieManager manager = <span class="keyword">new</span> CookieManager(); </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 将规则改掉，接受所有的 Cookie </span></span><br><span class="line">manager.setCookiePolicy(CookiePolicy.ACCEPT_ALL); </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 保存这个定制的 CookieManager </span></span><br><span class="line">CookieHandler.setDefault(manager); </span><br><span class="line">        </span><br><span class="line"><span class="comment">// 接受 HTTP 请求的时候，得到和保存新的 Cookie </span></span><br><span class="line">HttpCookie cookie = <span class="keyword">new</span> HttpCookie(<span class="string">"...(name)..."</span>,<span class="string">"...(value)..."</span>); </span><br><span class="line">manager.getCookieStore().add(uri, cookie); </span><br><span class="line">        </span><br><span class="line"><span class="comment">// 使用 Cookie 的时候：</span></span><br><span class="line"><span class="comment">// 取出 CookieStore        </span></span><br><span class="line">CookieStore store = manager.getCookieStore(); </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 得到所有的 URI        </span></span><br><span class="line"><span class="built_in">List</span>&lt;URI&gt; uris = store.getURIs(); </span><br><span class="line"><span class="keyword">for</span> (URI uri : uris) &#123; </span><br><span class="line">    <span class="comment">// 筛选需要的 URI </span></span><br><span class="line">    <span class="comment">// 得到属于这个 URI 的所有 Cookie </span></span><br><span class="line">    <span class="built_in">List</span>&lt;HttpCookie&gt; cookies = store.<span class="keyword">get</span>(uri); </span><br><span class="line">    <span class="keyword">for</span> (HttpCookie cookie : cookies) &#123; </span><br><span class="line">        <span class="comment">// 取出了 Cookie </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">        </span><br><span class="line"><span class="comment">// 或者，取出这个 CookieStore 里面的全部 Cookie </span></span><br><span class="line"><span class="comment">// 过期的 Cookie 将会被自动删除</span></span><br><span class="line"><span class="built_in">List</span>&lt;HttpCookie&gt; cookies = store.getCookies(); </span><br><span class="line"><span class="keyword">for</span> (HttpCookie cookie : cookies) &#123; </span><br><span class="line">    <span class="comment">// 取出了 Cookie </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK1.6 提供了一个简单的Http Server API，据此我们可以构建自己的嵌入式Http Server，它支持Http和Https协议，提供了HTTP1.1的部分实现，没有被实现的那部分可以通过扩展已有的Http Server API来实现，程序员必须自己实现HttpHandler接口，HttpServer会调用HttpHandler实现类的回调方法来处理客户端请求，在这里，我们把一个Http请求和它的响应称为一个交换，包装成HttpExchange类，HttpServer负责将HttpExchange传给HttpHandler实现类的回调方法。</p><h3 id="使用JAXB2来实现对象与XML之间的映射"><a href="#使用JAXB2来实现对象与XML之间的映射" class="headerlink" title="使用JAXB2来实现对象与XML之间的映射"></a>使用JAXB2来实现对象与XML之间的映射</h3><p>JAXB是Java Architecture for XML Binding的缩写，可以将一个Java对象转变成为XML格式，反之亦然。<br>我们把对象与关系数据库之间的映射称为ORM，其实也可以把对象与XML之间的映射称为OXM(Object XML Mapping)。原来JAXB是Java EE的一部分，在JDK1.6中，SUN将其放到了Java SE中，这也是SUN的一贯做法。JDK1.6中自带的这个JAXB版本是2.0，比起1.0(JSR 31)来，JAXB2(JSR 222)用JDK5的新特性Annotation来标识要作绑定的类和属性等，这就极大简化了开发的工作量。实际上，在Java EE 5.0中，EJB和Web Services也通过Annotation来简化开发工作。另外，JAXB2在底层是用StAX(JSR 173)来处理XML文档。<br>    除了JAXB之外，我们还可以通过XMLBeans和Castor等来实现同样的功能。</p><h3 id="脚本语言支持"><a href="#脚本语言支持" class="headerlink" title="脚本语言支持"></a>脚本语言支持</h3><p>支持ruby，groovy，javascript。</p><p>Java SE 6 还为运行脚本添加了一个专门的工具 —— jrunscript。jrunscript 支持两种运行方式：一种是交互式，即边读取边解析运行，这种方式使得用户可以方便调试脚本程序，马上获取预期结果；还有一种就是批处理式，即读取并运行整个脚本文件。用户可以把它想象成一个万能脚本解释器，即它可以运行任意脚本程序，而且它还是跨平台的，当然所有这一切都有一个前提，那就是必须告诉它相应的脚本引擎的位置。默认即支持的脚本是 JavaScript，这意味着用户可以无需任何设置，通过 jrunscript 在任何支持 Java 的平台上运行任何 JavaScript 脚本；如果想运行其他脚本，可以通过 -l 指定以何种脚本引擎运行脚本。不过这个工具仍是实验性质的，不一定会包含在 Java 的后续版本中，无论如何，它仍是一个非常有用的工具。</p><h3 id="Java-DB-和-JDBC-4-0"><a href="#Java-DB-和-JDBC-4-0" class="headerlink" title="Java DB 和 JDBC 4.0"></a>Java DB 和 JDBC 4.0</h3><p>新安装了 JDK 6 的程序员们也许会发现，除了传统的 bin、jre 等目录，JDK 6 新增了一个名为 db 的目录。这便是 Java 6 的新成员：Java DB。这是一个纯 Java 实现、开源的数据库管理系统（DBMS），源于 Apache 软件基金会（ASF）名下的项目 Derby。它只有 2MB 大小，对比动辄上 G 的数据库来说可谓袖珍。但这并不妨碍 Derby 功能齐备，支持几乎大部分的数据库应用所需要的特性。更难能可贵的是，依托于 ASF 强大的社区力量，Derby 得到了包括 IBM 和 Sun 等大公司以及全世界优秀程序员们的支持。这也难怪 Sun 公司会选择其 10.2.2 版本纳入到 JDK 6 中，作为内嵌的数据库。</p><h3 id="编译器API"><a href="#编译器API" class="headerlink" title="编译器API"></a>编译器API</h3><p>JDK 6 提供了在运行时调用编译器的 API，后面我们将假设把此 API 应用在 JSP 技术中。在传统的 JSP 技术中，服务器处理 JSP 通常需要进行下面 6 个步骤：</p><ol><li>分析 JSP 代码；</li><li>生成 Java 代码；</li><li>将 Java 代码写入存储器；</li><li>启动另外一个进程并运行编译器编译 Java 代码；</li><li>将类文件写入存储器；</li><li>服务器读入类文件并运行；<br>但如果采用运行时编译，可以同时简化步骤 4 和 5，节约新进程的开销和写入存储器的输出开销，提高系统效率。实际上，在 JDK 5 中，Sun 也提供了调用编译器的编程接口。然而不同的是，老版本的编程接口并不是标准 API 的一部分，而是作为 Sun 的专有实现提供的，而新版则带来了标准化的优点。<br>新 API 的第二个新特性是可以编译抽象文件，理论上是任何形式的对象 —— 只要该对象实现了特定的接口。有了这个特性，上述例子中的步骤 3 也可以省略。整个 JSP 的编译运行在一个进程中完成，同时消除额外的输入输出操作。<br>第三个新特性是可以收集编译时的诊断信息。作为对前两个新特性的补充，它可以使开发人员轻松的输出必要的编译错误或者是警告信息，从而省去了很多重定向的麻烦。</li></ol><h2 id="JAVA-5-0"><a href="#JAVA-5-0" class="headerlink" title="JAVA 5.0"></a>JAVA 5.0</h2><h3 id="自动装箱-拆箱-Auto-Boxing-Unboxing"><a href="#自动装箱-拆箱-Auto-Boxing-Unboxing" class="headerlink" title="自动装箱/拆箱(Auto-Boxing/Unboxing)"></a>自动装箱/拆箱(Auto-Boxing/Unboxing)</h3><p>没有自动装箱/拆箱：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">int1</span> = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">Integer integer2 = new Integer(<span class="keyword">int1</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">int3</span> = integer2.intValue()<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>有自动装箱/拆箱：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">int1</span> = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">Integer integer2 = <span class="keyword">int1</span><span class="comment">;     // 自動裝箱</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">int3</span> = integer2<span class="comment">;         // 自動拆箱</span></span><br></pre></td></tr></table></figure></p><h3 id="泛型-Generic-Types"><a href="#泛型-Generic-Types" class="headerlink" title="泛型(Generic Types)"></a>泛型(Generic Types)</h3><p>泛型就像是C++的模板。原有的Collection API加上泛型支持后，增加对类型的检查，减少程序错误的机会。</p><h3 id="注释-Annotation"><a href="#注释-Annotation" class="headerlink" title="注释(Annotation)"></a>注释(Annotation)</h3><p>Java的注释是一种接口 (interface)，继承自java.lang.annotation.Annotation。Class File则粘贴ACC_ANNOTATION标签。<br>从5.0开始，javadoc的@deprecated(代表不建议使用的方法或类别)也被Annotation中的@Deprecated取代；另外，使用Java 实现SOP的AspectJ与Spring也使用了大量的Annotation。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDK 1.4</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @todo to be implemented</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gimmeSomeLoving</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"not implemented"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDK 1.5</span></span><br><span class="line"><span class="meta">@todo</span> <span class="function"><span class="keyword">void</span> <span class="title">gimmeSomeLoving</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"not implemented"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举类型-enum"><a href="#枚举类型-enum" class="headerlink" title="枚举类型(enum)"></a>枚举类型(enum)</h3><p>枚举类型也是J2SE 5.0的新功能。过去Java认为enum的关键字是不必要的功能，因为用public static int field就可以取代enum，因此过去一直不用。J2SE 5.0中的class如果是enum，在class file中会被粘贴一个ACC_ENUM标签。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDK 1.4</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">JavaTech</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> J2ME = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> J2SE = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> J2EE = <span class="number">3</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDK 1.5</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">NewJavaTech</span> &#123;</span></span><br><span class="line">        J2ME, J2SE, J2EE</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="字符国际化"><a href="#字符国际化" class="headerlink" title="字符国际化"></a>字符国际化</h3><p>Java语言严格区分字节和字符。字符的存储格式为UCS-2，也就是只能使用位于基本多文种平面的字符，从Java 5开始支持UTF-16字符。<br>另外，从5.0开始Java的程序也开始可以使用Unicode字符进行命名。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span>文本 = <span class="string">"HelloWorld"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><p>在jdk1.5及其以后版本中，java.util.Scanner和java.util.Formatter类别被应用到输入输出中。另外，也出现了类似C语言的printf()函数。</p><h3 id="foreach-循环"><a href="#foreach-循环" class="headerlink" title="foreach 循环"></a>foreach 循环</h3><p>foreach循环，有时又称forin循环，在许多编程语言（包括C#、Ruby、JavaScript）中都有出现，可以直接将一个Array或Map展开，而不必程序员自行检查边界，可以有效减少错误的机会。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">for</span>(<span class="keyword">int</span> i : array1)&#123; <span class="comment">// foreach迴圈</span></span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"Number: "</span>+i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可变长度引数"><a href="#可变长度引数" class="headerlink" title="可变长度引数"></a>可变长度引数</h3><p>长久以来一直有用户要求加入printf()函数，受限于Java函数必须要有固定引数的限制，始终无法实现，在加入这个功能之后，连带printf()也变为可能。</p><h3 id="static引入"><a href="#static引入" class="headerlink" title="static引入"></a>static引入</h3><p>这个特性允许程序员将一个类别中的静态内容引入到程序中。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="meta"><span class="meta-keyword">import</span> java.lang.System.*;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String args[])&#123;</span><br><span class="line">        out.println(<span class="string">"Hello World."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="线程并发库"><a href="#线程并发库" class="headerlink" title="线程并发库"></a>线程并发库</h3><p>线程并发库是Java1.5提出的关于多线程处理的高级功能，所在包：java.util.concurrent包括</p><ol><li>线程互斥<br> 工具类描述：Lock，ReadWriteLock</li><li>线程通信<br> 描述：Condition</li><li>线程池<br> ExecutorService</li><li>同步队列<br> ArrayBlockingQueue</li><li>同步集合<br> ConcurrentHashMap，CopyOnWriteArrayList</li><li>线程同步工具<br> Semaphore</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;!--TOC--&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;Java语言自JDK 1.0版本以来经历了许多次更新，也大量在基本的程序库中增加了类别和包。从J2SE 1.4开始，Java语言的变动受到Java Community Process（JCP）的约束，JCP使用Java规范请求来建议和定义对Java平台内容的新增和修改。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="聚沙成塔" scheme="/categories/record/"/>
    
    
      <category term="record" scheme="/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>java高并发</title>
    <link href="/2017/08/02/java%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    <id>/2017/08/02/java高并发/</id>
    <published>2017-08-02T12:32:11.000Z</published>
    <updated>2019-07-15T02:16:33.348Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据库的整理笔记</title>
    <link href="/2017/08/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%95%B4%E7%90%86%E7%AC%94%E8%AE%B0/"/>
    <id>/2017/08/01/数据库的整理笔记/</id>
    <published>2017-08-01T07:50:09.000Z</published>
    <updated>2019-07-15T02:16:33.341Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ol><li><strong>聚集索引：</strong>索引键值的逻辑顺序与索引所服务的表中相应行的物理顺序<strong>相同</strong>的索引。</li><li><strong>非聚集索引：</strong>索引键值的逻辑顺序与索引所服务的表中相应行的物理顺序<strong>不相同</strong>的索引。<a id="more"></a></li><li><strong>唯一索引：</strong>唯一索引是不允许其中任何两行具有相同索引值的索引。</li><li><strong>主键索引：</strong>主键索引是唯一索引的特定类型。该索引要求主键中的每个值都唯一。当在查询中使用主键索引时，它还允许对数据的快速访问。</li></ol><p>&emsp;&emsp;聚集索引的索引值是直接指向数据表对应元组的，而非聚集索引的索引值仍会指向下一个索引数据块，不直接指向元组，因为还有一层索引进行重定向，所以非聚集索引可以拥有不同的键值排序而拥有多个不同的索引。而聚集索引因为与表的元组物理顺序一一对应，所以只有一种排序，即一个数据表只有一个聚集索引。</p><h2 id="建索引的几大原则"><a href="#建索引的几大原则" class="headerlink" title="建索引的几大原则"></a>建索引的几大原则</h2><ol><li>最左端前缀匹配原则：mysql会一直向右匹配直到遇到<strong>范围查询(&gt;、&lt;、between、like)</strong>。</li><li>“=”和“in”可以乱序，比如a = 1 and b = 2 and c = 3建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式。</li><li>尽量选择区分度高的列作为索引，区分度=count(distinct col)/count(*)，表示字段不重复的比例，比例越大，扫描的记录数越少，唯一键的区分度为1。一般需要join的字段的要求是区分度在0.1以上，即平均1条扫描10条记录。</li><li>索引列不能参与计算，需要保持列“干净”。例如from_unixtime(create_time) = ‘2017-08-04’需要改写为create_time = unix_timestamp(‘2017-08-04’)。</li><li>尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可。</li></ol><h2 id="应该创建索引的列"><a href="#应该创建索引的列" class="headerlink" title="应该创建索引的列"></a>应该创建索引的列</h2><ol><li>在经常需要搜索的列上，可以加快搜索的速度；</li><li>在经常需要排列的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间；</li><li>在经常使用在WHERE子句的列上面创建索引，加快条件的判断速度；</li><li>在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构；</li><li>在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度；</li><li>在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的；</li></ol><h2 id="不应该创建索引的列"><a href="#不应该创建索引的列" class="headerlink" title="不应该创建索引的列"></a>不应该创建索引的列</h2><p>第一，对于那些在查询中使用很少或者作为参考的列不应该创建索引。<br>第二，对于那些只有很少数据值的列不应该增加索引。<br>第三，对于那些定义为text,image和bit数据类型的列不应该增加索引。因为这些列的数据量要么很大，要么很少。<br>第四，当修改性能远远大于检索性能时，不应该创建索引。</p><h2 id="聚集索引"><a href="#聚集索引" class="headerlink" title="聚集索引"></a>聚集索引</h2><p><strong>定义：在聚集索引中，叶节点即数据节点，所有数据航的存储顺序与索引的存储顺序一致。</strong></p><p>当需要在根据此字段查找特定的记录时，数据库系统会根据特定的系统表查找的此索引的根，然后根据指针查找下一个，直到找到。例如我们要查询“Green”，由于它介于[Bennet,Karsen]，据此我们找到了索引页1007，在该页中“Green”介于[Greane, Hunter]间，据此我们找到叶结点1133（也即数据结点），并最终在此页中找以了目标数据行。</p><img src="/2017/08/01/数据库的整理笔记/聚集索引.JPG" title="聚集索引"><h2 id="非聚集索引"><a href="#非聚集索引" class="headerlink" title="非聚集索引"></a>非聚集索引</h2><p>聚集索引是一种稀疏索引，数据页上一级的索引页存储的是页指针，而不是行指针。<br>而对于非聚集索引，则是密集索引，在数据页的上一级索引页它为每一个数据行存储一条索引记录。</p><img src="/2017/08/01/数据库的整理笔记/非聚集索引.JPG" title="非聚集索引"><h2 id="非聚集索引与聚集索引对比"><a href="#非聚集索引与聚集索引对比" class="headerlink" title="非聚集索引与聚集索引对比"></a>非聚集索引与聚集索引对比</h2><p>A）叶子结点并非数据结点<br>B）叶子结点为每一真正的数据行存储一个“键-指针”对<br>C）叶子结点中还存储了一个指针偏移量，根据页指针及指针偏移量可以定位到具体的数据行。<br>D）类似的，在除叶结点外的其它索引结点，存储的也是类似的内容，只不过它是指向下一级的索引页的。</p><h2 id="索引的实现原理"><a href="#索引的实现原理" class="headerlink" title="索引的实现原理"></a>索引的实现原理</h2><p>&emsp;&emsp;索引一般采用B树/B+树来实现，当然也有例外，Memory引擎显示支持哈希索引，我们接下来分别进行讨论。</p><h3 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B-Tree索引"></a>B-Tree索引</h3><p>&emsp;&emsp;B-Tree是MyISAM和InnoDB引擎默认索引类型,也可以在创建索引时通过USING BTREE来显示指定。B-Tree是一种多叉平衡树,B-Tree 结构可以显著减少定位记录时所经历的中间过程,从而加快存取速度。一般用于数据库的索引,综合效率较高。</p><h3 id="B-Tree索引的应用场景"><a href="#B-Tree索引的应用场景" class="headerlink" title="B-Tree索引的应用场景"></a>B-Tree索引的应用场景</h3><pre><code>- 等值匹配 可用于= != &lt;&gt; IN NOT IN &lt;=&gt;查询语句的优化- 范围匹配 可用于 &gt; &gt;= &lt; &lt;= BTEWEEN AND等范围查询语句的优化- 匹配最左前缀 对于 name like bai% 这种后模糊匹配的查询,是可以利用name字段上建立的索引来优化查询的,但是对于name like %bai这种前模糊匹配的查询则没有办法使用索引了- 覆盖索引 B-Tree索引的key存放的是字段的值,如果key中包含所有需要查询字段的值,我们就称之为覆盖索引,覆盖索引能够极大的提高性能。- 排序 B-Tree索引是排好序的,所以MySQL可以用来优化ORDER BY 和 GROUP BY等操作。</code></pre><h3 id="哈希索引-HASH"><a href="#哈希索引-HASH" class="headerlink" title="哈希索引(HASH)"></a>哈希索引(HASH)</h3><p>&emsp;&emsp;哈希索引基于哈希表实现,只有Memory引擎显示支持哈希索引,使用哈希索引可以一次定位,所以 Hash 索引的查询效率要远高于 B-Tree 索引。但是哈希索引是有很多限制的:</p><pre><code>- 只有精确匹配索引所有列的查询才有效,因为哈希索引是利用索引的所有列的字段值来计算哈希值的。- 只支持等值比较查询,不能用于范围查询。- 哈希索引的只包含索引字段的哈希值和指向数据的指针,所以不能使用索引中的值来避免读取行。- 哈希索引的数据并不是顺序存储的,无法用于排序。</code></pre><h3 id="全文索引-FULLTEXT"><a href="#全文索引-FULLTEXT" class="headerlink" title="全文索引(FULLTEXT)"></a>全文索引(FULLTEXT)</h3><p>全文索引,是一种通过建立倒排索引,快速匹配文档的方式。</p><h3 id="空间索引-SPATIAL"><a href="#空间索引-SPATIAL" class="headerlink" title="空间索引(SPATIAL)"></a>空间索引(SPATIAL)</h3><p>MyISAM支持空间索引,可以用作地理数据的存储。</p><h2 id="InnoDB与MyISAM的区别"><a href="#InnoDB与MyISAM的区别" class="headerlink" title="InnoDB与MyISAM的区别"></a>InnoDB与MyISAM的区别</h2><ol><li>InnoDB支持事务，MyISAM不支持，这一点是非常之重要。事务是一种高级的处理方式，如在一些列增删改中只要哪个出错还可以回滚还原，而MyISAM就不可以了。</li><li>MyISAM适合查询以及插入为主的应用，InnoDB适合频繁修改以及涉及到安全性较高的应用</li><li>InnoDB支持外键，MyISAM不支持</li><li>MyISAM是默认引擎，InnoDB需要指定</li><li>InnoDB不支持FULLTEXT类型的索引</li><li>InnoDB中不保存表的行数，如<code>select count(*) from table</code>时，InnoDB需要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当<code>count(*)</code>语句包含where条件时MyISAM也需要扫描整个表</li><li>对于自增长的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中可以和其他字段一起建立联合索引</li><li>清空整个表时，InnoDB是一行一行的删除，效率非常慢。MyISAM则会重建表</li><li>InnoDB支持行锁（某些情况下还是锁整表，如 <code>update table set a=1 where user like &#39;%lee%&#39;</code>）</li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95" target="_blank" rel="noopener">维基百科：索引</a></li><li><a href="https://tech.meituan.com/mysql-index.html" target="_blank" rel="noopener">MySQL索引原理及慢查询优化</a></li><li><a href="http://www.cnblogs.com/morvenhuang/archive/2009/03/30/1425534.html" target="_blank" rel="noopener">数据库进阶系列之一：漫谈数据库索引</a></li><li><a href="http://shanks.leanote.com/post/Mysql%E7%B4%A2%E5%BC%95" target="_blank" rel="noopener">MySQL索引详解</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;!-- TOC --&gt;
&lt;h2 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;聚集索引：&lt;/strong&gt;索引键值的逻辑顺序与索引所服务的表中相应行的物理顺序&lt;strong&gt;相同&lt;/strong&gt;的索引。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非聚集索引：&lt;/strong&gt;索引键值的逻辑顺序与索引所服务的表中相应行的物理顺序&lt;strong&gt;不相同&lt;/strong&gt;的索引。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="聚沙成塔" scheme="/categories/record/"/>
    
    
      <category term="record" scheme="/tags/record/"/>
    
      <category term="MySQL" scheme="/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>JIT--即时编译</title>
    <link href="/2017/07/31/JIT/"/>
    <id>/2017/07/31/JIT/</id>
    <published>2017-07-31T08:51:54.000Z</published>
    <updated>2019-07-15T02:16:33.339Z</updated>
    
    <content type="html"><![CDATA[<!--TOC--><p><strong>JIT（Just-In-Time, 即时编译器）</strong><br>通常，程序有两种运行方式：静态编译与动态编译。静态编译的程序在执行前全部被翻译为机器码，而解释执行的则是一句一句边运行边翻译的。<a id="more"></a> Java字节码是解释执行的，但是没有直接在JVM宿主执行原生代码块。为了提高性能，Oracle Hotspot虚拟机会找到执行最频繁的字节码片段并把他们编译成原生机器码。编译出的原生机器码被存储在非堆内存的代码缓存中。在运行时JIT会把翻译过的机器码保存起来，以备下次使用。</p><h2 id="JIT的工作原理图"><a href="#JIT的工作原理图" class="headerlink" title="JIT的工作原理图"></a>JIT的工作原理图</h2><p>当JIT编译启用时（默认是启用的），JVM读入.class文件解释后，将其发给JIT编译器。JIT编译器将字节码编译成本机机器代码，它的工作原理图如下。</p><img src="/2017/07/31/JIT/JIT.PNG" title="JIT的工作原理图"><h2 id="Hot-Spot编译"><a href="#Hot-Spot编译" class="headerlink" title="Hot Spot编译"></a>Hot Spot编译</h2><p>当JVM执行代码时，它并不立即开始编译代码，这主要有两个原因：<br>首先，如果这段代码本身在将来只会执行一次，那么从本质上看，编译就是在浪费精力。因为将代码翻译成java字节码相对于编译这段代码并执行来说，要快的多。</p><p>当然，如果一段代码频繁的被调用，或是在一个循环中，那么编译就很有必要。隐藏，编译器具有的这种权衡能力会首先执行解释后的代码，然后再去分辨哪些方法会被频繁调用来保证其本身的编译。这就是JIT在起作用，对于Java代码，刚开始都是被编译器编译成字节码文件，然后字节码文件会被交由JVM解释执行，所以可以说Java本身死一种半编译半解释执行的语言。Hot Spot VM 采用了JIT compile技术，将运行频率很高的字节码直接编译为机器指令执行，以提高性能，所以当字节码被JIT编译为机器码的时候，要说它编译执行的也可以。也就是在运行时，部分代码可能由JIT翻译为目标机器指令直接执行（以method为翻译单位，同时会保存起来，当第二次执行时就不必翻译了）。</p><p>第二个原因是最优化。当JVM执行某一方法或遍历循环的次数越多，就会更加了解代码结构，那么JVM在编译代码的时候就做出相应的优化。</p><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><ol><li><a href="http://www.imooc.com/article/4921" target="_blank" rel="noopener">JVM内幕：Java虚拟机详解</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-just-in-time/index.html" target="_blank" rel="noopener">深入浅出JIT编译器</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;!--TOC--&gt;
&lt;p&gt;&lt;strong&gt;JIT（Just-In-Time, 即时编译器）&lt;/strong&gt;&lt;br&gt;通常，程序有两种运行方式：静态编译与动态编译。静态编译的程序在执行前全部被翻译为机器码，而解释执行的则是一句一句边运行边翻译的。&lt;/p&gt;
    
    </summary>
    
      <category term="聚沙成塔" scheme="/categories/record/"/>
    
    
      <category term="record" scheme="/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>数据链路层的要点</title>
    <link href="/2017/07/29/Computer%20Network/"/>
    <id>/2017/07/29/Computer Network/</id>
    <published>2017-07-29T07:16:54.000Z</published>
    <updated>2019-07-15T02:16:33.338Z</updated>
    
    <content type="html"><![CDATA[<!--TOC--><h2 id="主要解决三个基本问题"><a href="#主要解决三个基本问题" class="headerlink" title="主要解决三个基本问题"></a>主要解决三个基本问题</h2><ol><li><strong>封装成帧</strong><ul><li>封装成帧通过SOH、EOT帧界定符来进行确认帧的边界，将物理层的二进制数据流封装成帧。<a id="more"></a></li></ul></li><li><strong>透明传输</strong><ul><li>透明传输是通过转义字符来解决的，通过转义字符解决数据内容中存在帧界定符时的特殊情况。</li></ul></li><li><strong>差错检测</strong><ul><li>差错检测是近似地认为凡是接收端数据链路层接受的帧均无差错。差错检测分为了无比特差错和无传输差错。</li><li>无比特差错：CRC（Cyclic Redundancy Check，循环冗余校验）</li><li>无传输差错：帧编号，帧确认和帧重传机制来实现</li></ul></li></ol><h2 id="MTU"><a href="#MTU" class="headerlink" title="MTU"></a>MTU</h2><p>MTU（Maximum Transmission Unit，最大传输单元）：数据链路层数据部分的长度，其默认值是1500字节。MTU不是越大越好，MTU越大意味着传送一个数据包的延迟也越大，bit位发生错误的概率就越大。</p><h2 id="ARP是地址解析协议的工作原理。"><a href="#ARP是地址解析协议的工作原理。" class="headerlink" title="ARP是地址解析协议的工作原理。"></a>ARP是地址解析协议的工作原理。</h2><p>1：首先，每个主机都会在自己的ARP缓冲区中建立一个ARP列表，以表示IP地址和MAC地址之间的对应关系。</p><p>2：当源主机要发送数据时，首先检查ARP列表中是否有对应IP地址的目的主机的MAC地址，如果有，则直接发送数据，如果没有，就向本网段的所有主机发送ARP数据包，该数据包包括的内容有：源主机 IP地址，源主机MAC地址，目的主机的IP 地址。</p><p>3：当本网络的所有主机收到该ARP数据包时，首先检查数据包中的IP地址是否是自己的IP地址，如果不是，则忽略该数据包，如果是，则首先从数据包中取出源主机的IP和MAC地址写入到ARP列表中，如果已经存在，则覆盖，然后将自己的MAC地址写入ARP响应包中，告诉源主机自己是它想要找的MAC地址。</p><p>4：源主机收到ARP响应包后。将目的主机的IP和MAC地址写入ARP列表，并利用此信息发送数据。如果源主机一直没有收到ARP响应数据包，表示ARP查询失败。</p><p>广播发送ARP请求，单播发送ARP响应。</p><h2 id="RARP的工作原理"><a href="#RARP的工作原理" class="headerlink" title="RARP的工作原理"></a>RARP的工作原理</h2><p>RARP是逆地址解析协议，作用是完成硬件地址到IP地址的映射，主要用于无盘工作站，因为给无盘工作站配置的IP地址不能保存。工作流程：在网络中配置一台RARP服务器，里面保存着IP地址和MAC地址的映射关系，当无盘工作站启动后，就封装一个RARP数据包，里面有其MAC地址，然后广播到网络上去，当服务器收到请求包后，就查找对应的MAC地址的IP地址装入响应报文中发回给请求者。因为需要广播请求报文，因此RARP只能用于具有广播能力的网络。</p>]]></content>
    
    <summary type="html">
    
      &lt;!--TOC--&gt;
&lt;h2 id=&quot;主要解决三个基本问题&quot;&gt;&lt;a href=&quot;#主要解决三个基本问题&quot; class=&quot;headerlink&quot; title=&quot;主要解决三个基本问题&quot;&gt;&lt;/a&gt;主要解决三个基本问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;封装成帧&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;封装成帧通过SOH、EOT帧界定符来进行确认帧的边界，将物理层的二进制数据流封装成帧。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="聚沙成塔" scheme="/categories/record/"/>
    
    
      <category term="record" scheme="/tags/record/"/>
    
      <category term="network" scheme="/tags/network/"/>
    
  </entry>
  
</feed>
